// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractYayoiCollection

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// YayoiCollectionAuction is an auto generated low-level Go binding around an user-defined struct.
type YayoiCollectionAuction struct {
	Finished      bool
	HighestBidder common.Address
	HighestBid    *big.Int
	Prompt        string
}

// YayoiCollectionInitializeParams is an auto generated low-level Go binding around an user-defined struct.
type YayoiCollectionInitializeParams struct {
	Name            string
	Symbol          string
	Factory         common.Address
	Owner           common.Address
	SystemPromptUri string
	PaymentToken    common.Address
	MinimumBidPrice *big.Int
	AuctionDuration uint64
}

// ContractYayoiCollectionMetaData contains all meta data concerning the ContractYayoiCollection contract.
var ContractYayoiCollectionMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"auctionDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"creationTimestamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"factory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractYayoiFactory\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"finishPromptAuction\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getApproved\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAuction\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structYayoiCollection.Auction\",\"components\":[{\"name\":\"finished\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"highestBidder\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"highestBid\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"prompt\",\"type\":\"string\",\"internalType\":\"string\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAuctionEndTime\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAuctionIdByTimestamp\",\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAuctionStartTime\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentAuctionId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structYayoiCollection.InitializeParams\",\"components\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"factory\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"systemPromptUri\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"paymentToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"minimumBidPrice\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"auctionDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isApprovedForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minimumBidPrice\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextTokenId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ownerOf\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paymentToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingWithdrawals\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setApprovalForAll\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinimumBidPrice\",\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"suggestPrompt\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"prompt\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"bid\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sweepTokens\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"systemPromptUri\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tokenURI\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawPendingBids\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ApprovalForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BatchMetadataUpdate\",\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_toTokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MetadataUpdate\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinimumBidPriceUpdated\",\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptAuctionBid\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"bidder\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptAuctionFinished\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"prompt\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptAuctionStarted\",\"inputs\":[{\"name\":\"auctionId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptSubmitted\",\"inputs\":[{\"name\":\"submitter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetupCompleted\",\"inputs\":[{\"name\":\"systemPromptUri\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"paymentToken\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"minimumBidPrice\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"ERC721IncorrectOwner\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InsufficientApproval\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721NonexistentToken\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6134b1806100d96000396000f3fe6080604052600436106102345760003560e01c80638456cb591161012e578063b3311086116100ab578063ea8a8a2a1161006f578063ea8a8a2a146106bd578063f2fde38b146106d2578063f3f43703146106f2578063f5f6d3af1461071f578063f698da251461073f57600080fd5b8063b33110861461061d578063b88d4fde1461063d578063c45a01551461065d578063c87b56dd1461067d578063e985e9c51461069d57600080fd5b806395d89b41116100f257806395d89b41146105a057806395e49c7c146105b5578063a22cb465146105d5578063a64604df146105f5578063ac08121a1461060a57600080fd5b80638456cb59146104e657806384b0196e146104fb5780638da5cb5b14610523578063919e84f514610560578063930e79f11461058057600080fd5b80633013ce29116101bc57806370a082311161018057806370a082311461044e578063715018a61461046e57806375794a3c1461048357806377b5717f1461049957806378bd7935146104b957600080fd5b80633013ce29146103a957806342842e0e146103c95780635c975abb146103e95780636352211e1461040e57806366ef1d701461042e57600080fd5b80630b0ee90f116102035780630b0ee90f146102f15780630cbf54c814610315578063157db3161461035457806316d5c3a41461036957806323b872dd1461038957600080fd5b806301ffc9a71461024057806306fdde0314610275578063081812fc14610297578063095ea7b3146102cf57600080fd5b3661023b57005b600080fd5b34801561024c57600080fd5b5061026061025b366004612b29565b610754565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028a61077f565b60405161026c9190612b96565b3480156102a357600080fd5b506102b76102b2366004612ba9565b610823565b6040516001600160a01b03909116815260200161026c565b3480156102db57600080fd5b506102ef6102ea366004612bde565b610838565b005b3480156102fd57600080fd5b5061030760045481565b60405190815260200161026c565b34801561032157600080fd5b5060055461033c90600160401b90046001600160401b031681565b6040516001600160401b03909116815260200161026c565b34801561036057600080fd5b50610307610847565b34801561037557600080fd5b506102ef610384366004612cdb565b610879565b34801561039557600080fd5b506102ef6103a4366004612d4b565b610b8b565b3480156103b557600080fd5b506003546102b7906001600160a01b031681565b3480156103d557600080fd5b506102ef6103e4366004612d4b565b610c16565b3480156103f557600080fd5b5060008051602061345c8339815191525460ff16610260565b34801561041a57600080fd5b506102b7610429366004612ba9565b610c36565b34801561043a57600080fd5b50610307610449366004612ba9565b610c41565b34801561045a57600080fd5b50610307610469366004612d88565b610c6e565b34801561047a57600080fd5b506102ef610cca565b34801561048f57600080fd5b5061030760005481565b3480156104a557600080fd5b506102ef6104b4366004612ba9565b610cde565b3480156104c557600080fd5b506104d96104d4366004612ba9565b610de8565b60405161026c9190612da3565b3480156104f257600080fd5b506102ef610ef1565b34801561050757600080fd5b50610510610f01565b60405161026c9796959493929190612de6565b34801561052f57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102b7565b34801561056c57600080fd5b5061030761057b366004612ba9565b610fad565b34801561058c57600080fd5b5061030761059b366004612ba9565b610fe3565b3480156105ac57600080fd5b5061028a61100e565b3480156105c157600080fd5b506102ef6105d0366004612e95565b61104d565b3480156105e157600080fd5b506102ef6105f0366004612fb7565b611333565b34801561060157600080fd5b5061028a61133e565b6102ef610618366004612fee565b6113cc565b34801561062957600080fd5b5060055461033c906001600160401b031681565b34801561064957600080fd5b506102ef61065836600461303e565b61161c565b34801561066957600080fd5b506001546102b7906001600160a01b031681565b34801561068957600080fd5b5061028a610698366004612ba9565b611634565b3480156106a957600080fd5b506102606106b83660046130a5565b611769565b3480156106c957600080fd5b506102ef6117b6565b3480156106de57600080fd5b506102ef6106ed366004612d88565b611838565b3480156106fe57600080fd5b5061030761070d366004612d88565b60076020526000908152604090205481565b34801561072b57600080fd5b506102ef61073a366004612d88565b611873565b34801561074b57600080fd5b50610307611885565b60006001600160e01b03198216632483248360e11b148061077957506107798261188f565b92915050565b60008051602061341c833981519152805460609190819061079f906130d8565b80601f01602080910402602001604051908101604052809291908181526020018280546107cb906130d8565b80156108185780601f106107ed57610100808354040283529160200191610818565b820191906000526020600020905b8154815290600101906020018083116107fb57829003601f168201915b505050505091505090565b600061082e826118df565b5061077982611917565b610843828233611951565b5050565b6005546000906001600160401b03600160401b820481169161086a911642613128565b610874919061313b565b905090565b61088283610fe3565b4210156108cd5760405162461bcd60e51b815260206004820152601460248201527341756374696f6e207374696c6c2061637469766560601b60448201526064015b60405180910390fd5b6000838152600660205260409020805460ff161561092d5760405162461bcd60e51b815260206004820152601860248201527f41756374696f6e20616c72656164792066696e6973686564000000000000000060448201526064016108c4565b805461010090046001600160a01b031661097a5760405162461bcd60e51b815260206004820152600e60248201526d139bc8189a591cc81c1b1858d95960921b60448201526064016108c4565b805460ff1916600190811782556000549061099690829061315d565b600090815582548551602080880191909120604080517fe9aa4d8bde8520de6be09af9531c3c7a60b27652e97c391f8f8d7b7cdca1f6f6818501526101009094046001600160a01b031684820152606080850192909252805180850390920182526080909301909252815191012090610a0e8261195e565b90506000610a1c828761198b565b6001546040516324822f0b60e11b81526001600160a01b0380841660048301529293509116906349045e1690602401602060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c9190613170565b610acc5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016108c4565b8454610ae69061010090046001600160a01b0316856119b5565b610af084886119cf565b60006127106103e88760010154610b07919061318d565b610b11919061313b565b600354600154919250610b31916001600160a01b03918216911683611a42565b85546040516101009091046001600160a01b0316908a907f14bfb274a337f9408e9193eb4f20a1b3a0df509ad4a3c2e624147d7967f27aea90610b789060028b01906131a4565b60405180910390a3505050505050505050565b6001600160a01b038216610bb557604051633250574960e11b8152600060048201526024016108c4565b6000610bc2838333611afd565b9050836001600160a01b0316816001600160a01b031614610c10576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016108c4565b50505050565b610c318383836040518060200160405280600081525061161c565b505050565b6000610779826118df565b6005546000906001600160401b03600160401b8204811691610c64911684613128565b610779919061313b565b600060008051602061341c8339815191526001600160a01b038316610ca9576040516322718ad960e21b8152600060048201526024016108c4565b6001600160a01b039092166000908152600390920160205250604090205490565b610cd2611c07565b610cdc6000611c62565b565b610ce6611c07565b600160009054906101000a90046001600160a01b03166001600160a01b03166348b7bf2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d9190613230565b811015610dac5760405162461bcd60e51b815260206004820181905260248201527f4c657373207468616e2062617365206d696e696d756d2062696420707269636560448201526064016108c4565b60048190556040518181527f4e1604effc0bf569150bff6c299be65828d46873b5ea1764ea94eb121ce5125d906020015b60405180910390a150565b60408051608081018252600080825260208201819052918101919091526060808201526000828152600660209081526040918290208251608081018452815460ff81161515825261010090046001600160a01b031692810192909252600181015492820192909252600282018054919291606084019190610e68906130d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e94906130d8565b8015610ee15780601f10610eb657610100808354040283529160200191610ee1565b820191906000526020600020905b815481529060010190602001808311610ec457829003601f168201915b5050505050815250509050919050565b610ef9611c07565b610cdc611cd3565b6000606080828080838160008051602061343c8339815191528054909150158015610f2e57506001810154155b610f725760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064016108c4565b610f7a611d25565b610f82611d64565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b600554600090610fcd90600160401b90046001600160401b03168361318d565b60055461077991906001600160401b031661315d565b600554600090600160401b90046001600160401b031661100483600161315d565b610fcd919061318d565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079301805460609160008051602061341c8339815191529161079f906130d8565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110925750825b90506000826001600160401b031660011480156110ae5750303b155b9050811580156110bc575080155b156110da5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561110457845460ff60401b1916600160401b1785555b60408601516001600160a01b03166111505760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420666163746f727960881b60448201526064016108c4565b60008660e001516001600160401b0316116111ad5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e000000000000000060448201526064016108c4565b6111bf86600001518760200151611da3565b6111c7611db5565b6111d48660600151611dbd565b6111fb8660000151604051806040016040528060018152602001603160f81b815250611dce565b611203611de0565b6040860151600180546001600160a01b0319166001600160a01b0390921691909117905560808601516002906112399082613290565b5060a0860151600380546001600160a01b0319166001600160a01b03831617905560c0870151600481905560e0880151600580546fffffffffffffffffffffffffffffffff1916600160401b6001600160401b039384160267ffffffffffffffff191617429290921691909117905560808801516040517f9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71936112dd93909161334e565b60405180910390a1831561132b57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610843338383611df0565b6002805461134b906130d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611377906130d8565b80156113c45780601f10611399576101008083540402835291602001916113c4565b820191906000526020600020905b8154815290600101906020018083116113a757829003601f168201915b505050505081565b6113d4611ea1565b6113dc610847565b831461141f5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a5908185d58dd1a5bdb88125160721b60448201526064016108c4565b60045481101561145f5760405162461bcd60e51b815260206004820152600b60248201526a42696420746f6f206c6f7760a81b60448201526064016108c4565b6000838152600660205260409020805461010090046001600160a01b03166114bc57837fb2b65ce77efcb926ee7a9434657c8340c1d173f2ce383af15a848762f102e7c6426040516114b391815260200190565b60405180910390a25b805460018201546101009091046001600160a01b0316908084116115165760405162461bcd60e51b8152602060048201526011602482015270139bdd0818481dda5b9b9a5b99c8189a59607a1b60448201526064016108c4565b801561154a576001600160a01b0382166000908152600760205260408120805483929061154490849061315d565b90915550505b8254610100600160a81b031916336101000217835560018301849055600283016115748682613290565b50604051848152339087907f797a600a7a69cc689dfcf3cce3bbd5355eb2ddbc787796974cb4c4bedfd8625c9060200160405180910390a333600090815260076020526040902054808511156115f857336000908152600760205260408120556003546115f3906001600160a01b03166115ee8388613128565b611ed2565b611613565b6116028582613128565b336000908152600760205260409020555b50505050505050565b611627848484610b8b565b610c103385858585611f38565b60607f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900611660836118df565b506000838152602082905260408120805461167a906130d8565b80601f01602080910402602001604051908101604052809291908181526020018280546116a6906130d8565b80156116f35780601f106116c8576101008083540402835291602001916116f3565b820191906000526020600020905b8154815290600101906020018083116116d657829003601f168201915b50505050509050600061171160408051602081019091526000815290565b9050805160000361172457509392505050565b81511561175757808260405160200161173e92919061337c565b6040516020818303038152906040529350505050919050565b61176085612061565b95945050505050565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b336000908152600760205260409020548061180c5760405162461bcd60e51b81526020600482015260166024820152754e6f2070656e64696e67207769746864726177616c7360501b60448201526064016108c4565b33600081815260076020526040812055600354611835916001600160a01b039091169083611a42565b50565b611840611c07565b6001600160a01b03811661186a57604051631e4fbdf760e01b8152600060048201526024016108c4565b61183581611c62565b61187b611c07565b61183581336120d6565b6000610874612204565b60006001600160e01b031982166380ac58cd60e01b14806118c057506001600160e01b03198216635b5e139f60e01b145b8061077957506301ffc9a760e01b6001600160e01b0319831614610779565b6000806118eb8361220e565b90506001600160a01b03811661077957604051637e27328960e01b8152600481018490526024016108c4565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b610c318383836001612248565b600061077961196b612204565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061199b868661235e565b9250925092506119ab82826123ab565b5090949350505050565b610843828260405180602001604052806000815250612464565b60008281527f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e790060208190526040909120611a098382613290565b506040518381527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a1505050565b6001600160a01b038316611ae9576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611a9d576040519150601f19603f3d011682016040523d82523d6000602084013e611aa2565b606091505b5050905080610c105760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064016108c4565b610c316001600160a01b038416838361247c565b600060008051602061341c83398151915281611b188561220e565b90506001600160a01b03841615611b3457611b348185876124db565b6001600160a01b03811615611b7457611b51600086600080612248565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b03861615611ba5576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b33611c397f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610cdc5760405163118cdaa760e01b81523360048201526024016108c4565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611cdb611ea1565b60008051602061345c833981519152805460ff191660011781556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610ddd565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102805460609160008051602061343c8339815191529161079f906130d8565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d103805460609160008051602061343c8339815191529161079f906130d8565b611dab61253f565b6108438282612588565b610cdc61253f565b611dc561253f565b611835816125b9565b611dd661253f565b61084382826125c1565b611de861253f565b610cdc612622565b60008051602061341c8339815191526001600160a01b038316611e3157604051630b61174360e31b81526001600160a01b03841660048201526024016108c4565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b60008051602061345c8339815191525460ff1615610cdc5760405163d93c066560e01b815260040160405180910390fd5b6001600160a01b038216611f2357803410156108435760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b60448201526064016108c4565b6108436001600160a01b038316333084612643565b6001600160a01b0383163b1561205a57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611f7a9088908890879087906004016133ab565b6020604051808303816000875af1925050508015611fb5575060408051601f3d908101601f19168201909252611fb2918101906133e8565b60015b61201e573d808015611fe3576040519150601f19603f3d011682016040523d82523d6000602084013e611fe8565b606091505b50805160000361201657604051633250574960e11b81526001600160a01b03851660048201526024016108c4565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461132b57604051633250574960e11b81526001600160a01b03851660048201526024016108c4565b5050505050565b606061206c826118df565b50600061208460408051602081019091526000815290565b905060008151116120a457604051806020016040528060008152506120cf565b806120ae8461267c565b6040516020016120bf92919061337c565b6040516020818303038152906040525b9392505050565b6120de611c07565b6001600160a01b038216612185576000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114612139576040519150601f19603f3d011682016040523d82523d6000602084013e61213e565b606091505b5050905080610c315760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064016108c4565b6040516370a0823160e01b81523060048201526108439082906001600160a01b038516906370a0823190602401602060405180830381865afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f39190613230565b6001600160a01b038516919061247c565b600061087461270e565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b60008051602061341c833981519152818061226b57506001600160a01b03831615155b1561232d57600061227b856118df565b90506001600160a01b038416158015906122a75750836001600160a01b0316816001600160a01b031614155b80156122ba57506122b88185611769565b155b156122e35760405163a9fbf51f60e01b81526001600160a01b03851660048201526024016108c4565b821561232b5784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600083516041036123985760208401516040850151606086015160001a61238a88828585612782565b9550955095505050506123a4565b50508151600091506002905b9250925092565b60008260038111156123bf576123bf613405565b036123c8575050565b60018260038111156123dc576123dc613405565b036123fa5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561240e5761240e613405565b0361242f5760405163fce698f760e01b8152600481018290526024016108c4565b600382600381111561244357612443613405565b03610843576040516335e2f38360e21b8152600481018290526024016108c4565b61246e8383612851565b610c31336000858585611f38565b6040516001600160a01b03838116602483015260448201839052610c3191859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506128b6565b6124e6838383612927565b610c31576001600160a01b03831661251457604051637e27328960e01b8152600481018290526024016108c4565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016108c4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610cdc57604051631afcd79f60e31b815260040160405180910390fd5b61259061253f565b60008051602061341c833981519152806125aa8482613290565b5060018101610c108382613290565b61184061253f565b6125c961253f565b60008051602061343c8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026126038482613290565b50600381016126128382613290565b5060008082556001909101555050565b61262a61253f565b60008051602061345c833981519152805460ff19169055565b6040516001600160a01b038481166024830152838116604483015260648201839052610c109186918216906323b872dd906084016124a9565b606060006126898361298d565b60010190506000816001600160401b038111156126a8576126a8612c08565b6040519080825280601f01601f1916602001820160405280156126d2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846126dc57509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612739612a65565b612741612acf565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156127bd5750600091506003905082612847565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612811573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661283d57506000925060019150829050612847565b9250600091508190505b9450945094915050565b6001600160a01b03821661287b57604051633250574960e11b8152600060048201526024016108c4565b600061288983836000611afd565b90506001600160a01b03811615610c31576040516339e3563760e11b8152600060048201526024016108c4565b600080602060008451602086016000885af1806128d9576040513d6000823e3d81fd5b50506000513d915081156128f15780600114156128fe565b6001600160a01b0384163b155b15610c1057604051635274afe760e01b81526001600160a01b03851660048201526024016108c4565b60006001600160a01b038316158015906129855750826001600160a01b0316846001600160a01b0316148061296157506129618484611769565b806129855750826001600160a01b031661297a83611917565b6001600160a01b0316145b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106129cc5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106129f8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612a1657662386f26fc10000830492506010015b6305f5e1008310612a2e576305f5e100830492506008015b6127108310612a4257612710830492506004015b60648310612a54576064830492506002015b600a83106107795760010192915050565b600060008051602061343c83398151915281612a7f611d25565b805190915015612a9757805160209091012092915050565b81548015612aa6579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b600060008051602061343c83398151915281612ae9611d64565b805190915015612b0157805160209091012092915050565b60018201548015612aa6579392505050565b6001600160e01b03198116811461183557600080fd5b600060208284031215612b3b57600080fd5b81356120cf81612b13565b60005b83811015612b61578181015183820152602001612b49565b50506000910152565b60008151808452612b82816020860160208601612b46565b601f01601f19169290920160200192915050565b6020815260006120cf6020830184612b6a565b600060208284031215612bbb57600080fd5b5035919050565b80356001600160a01b0381168114612bd957600080fd5b919050565b60008060408385031215612bf157600080fd5b612bfa83612bc2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715612c4157612c41612c08565b60405290565b600082601f830112612c5857600080fd5b8135602083016000806001600160401b03841115612c7857612c78612c08565b50604051601f19601f85018116603f011681018181106001600160401b0382111715612ca657612ca6612c08565b604052838152905080828401871015612cbe57600080fd5b838360208301376000602085830101528094505050505092915050565b600080600060608486031215612cf057600080fd5b8335925060208401356001600160401b03811115612d0d57600080fd5b612d1986828701612c47565b92505060408401356001600160401b03811115612d3557600080fd5b612d4186828701612c47565b9150509250925092565b600080600060608486031215612d6057600080fd5b612d6984612bc2565b9250612d7760208501612bc2565b929592945050506040919091013590565b600060208284031215612d9a57600080fd5b6120cf82612bc2565b6020815281511515602082015260018060a01b036020830151166040820152604082015160608201526000606083015160808084015261298560a0840182612b6a565b60ff60f81b8816815260e060208201526000612e0560e0830189612b6a565b8281036040840152612e178189612b6a565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015612e6d578351835260209384019390920191600101612e4f565b50909b9a5050505050505050505050565b80356001600160401b0381168114612bd957600080fd5b600060208284031215612ea757600080fd5b81356001600160401b03811115612ebd57600080fd5b82016101008185031215612ed057600080fd5b612ed8612c1e565b81356001600160401b03811115612eee57600080fd5b612efa86828501612c47565b82525060208201356001600160401b03811115612f1657600080fd5b612f2286828501612c47565b602083015250612f3460408301612bc2565b6040820152612f4560608301612bc2565b606082015260808201356001600160401b03811115612f6357600080fd5b612f6f86828501612c47565b608083015250612f8160a08301612bc2565b60a082015260c08281013590820152612f9c60e08301612e7e565b60e0820152949350505050565b801515811461183557600080fd5b60008060408385031215612fca57600080fd5b612fd383612bc2565b91506020830135612fe381612fa9565b809150509250929050565b60008060006060848603121561300357600080fd5b8335925060208401356001600160401b0381111561302057600080fd5b61302c86828701612c47565b93969395505050506040919091013590565b6000806000806080858703121561305457600080fd5b61305d85612bc2565b935061306b60208601612bc2565b92506040850135915060608501356001600160401b0381111561308d57600080fd5b61309987828801612c47565b91505092959194509250565b600080604083850312156130b857600080fd5b6130c183612bc2565b91506130cf60208401612bc2565b90509250929050565b600181811c908216806130ec57607f821691505b60208210810361310c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561077957610779613112565b60008261315857634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561077957610779613112565b60006020828403121561318257600080fd5b81516120cf81612fa9565b808202811582820484141761077957610779613112565b6020815260008083546131b6816130d8565b80602086015260018216600081146131d557600181146131f157613225565b60ff1983166040870152604082151560051b8701019350613225565b86600052602060002060005b8381101561321c578154888201604001526001909101906020016131fd565b87016040019450505b509195945050505050565b60006020828403121561324257600080fd5b5051919050565b601f821115610c3157806000526020600020601f840160051c810160208510156132705750805b601f840160051c820191505b8181101561205a576000815560010161327c565b81516001600160401b038111156132a9576132a9612c08565b6132bd816132b784546130d8565b84613249565b6020601f8211600181146132f157600083156132d95750848201515b600019600385901b1c1916600184901b17845561205a565b600084815260208120601f198516915b828110156133215787850151825560209485019460019092019101613301565b508482101561333f5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6060815260006133616060830186612b6a565b6001600160a01b039490941660208301525060400152919050565b6000835161338e818460208801612b46565b8351908301906133a2818360208801612b46565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133de90830184612b6a565b9695505050505050565b6000602082840312156133fa57600080fd5b81516120cf81612b13565b634e487b7160e01b600052602160045260246000fdfe80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a2646970667358221220be395a0400efdace2e4de21d8e2fd958c08f9f2ee53e1f882bc1e303493f706464736f6c634300081b0033",
}

// ContractYayoiCollectionABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractYayoiCollectionMetaData.ABI instead.
var ContractYayoiCollectionABI = ContractYayoiCollectionMetaData.ABI

// ContractYayoiCollectionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractYayoiCollectionMetaData.Bin instead.
var ContractYayoiCollectionBin = ContractYayoiCollectionMetaData.Bin

// DeployContractYayoiCollection deploys a new Ethereum contract, binding an instance of ContractYayoiCollection to it.
func DeployContractYayoiCollection(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContractYayoiCollection, error) {
	parsed, err := ContractYayoiCollectionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractYayoiCollectionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractYayoiCollection{ContractYayoiCollectionCaller: ContractYayoiCollectionCaller{contract: contract}, ContractYayoiCollectionTransactor: ContractYayoiCollectionTransactor{contract: contract}, ContractYayoiCollectionFilterer: ContractYayoiCollectionFilterer{contract: contract}}, nil
}

// ContractYayoiCollection is an auto generated Go binding around an Ethereum contract.
type ContractYayoiCollection struct {
	ContractYayoiCollectionCaller     // Read-only binding to the contract
	ContractYayoiCollectionTransactor // Write-only binding to the contract
	ContractYayoiCollectionFilterer   // Log filterer for contract events
}

// ContractYayoiCollectionCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractYayoiCollectionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractYayoiCollectionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractYayoiCollectionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractYayoiCollectionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractYayoiCollectionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractYayoiCollectionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractYayoiCollectionSession struct {
	Contract     *ContractYayoiCollection // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ContractYayoiCollectionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractYayoiCollectionCallerSession struct {
	Contract *ContractYayoiCollectionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ContractYayoiCollectionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractYayoiCollectionTransactorSession struct {
	Contract     *ContractYayoiCollectionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ContractYayoiCollectionRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractYayoiCollectionRaw struct {
	Contract *ContractYayoiCollection // Generic contract binding to access the raw methods on
}

// ContractYayoiCollectionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractYayoiCollectionCallerRaw struct {
	Contract *ContractYayoiCollectionCaller // Generic read-only contract binding to access the raw methods on
}

// ContractYayoiCollectionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractYayoiCollectionTransactorRaw struct {
	Contract *ContractYayoiCollectionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractYayoiCollection creates a new instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollection(address common.Address, backend bind.ContractBackend) (*ContractYayoiCollection, error) {
	contract, err := bindContractYayoiCollection(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollection{ContractYayoiCollectionCaller: ContractYayoiCollectionCaller{contract: contract}, ContractYayoiCollectionTransactor: ContractYayoiCollectionTransactor{contract: contract}, ContractYayoiCollectionFilterer: ContractYayoiCollectionFilterer{contract: contract}}, nil
}

// NewContractYayoiCollectionCaller creates a new read-only instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollectionCaller(address common.Address, caller bind.ContractCaller) (*ContractYayoiCollectionCaller, error) {
	contract, err := bindContractYayoiCollection(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionCaller{contract: contract}, nil
}

// NewContractYayoiCollectionTransactor creates a new write-only instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollectionTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractYayoiCollectionTransactor, error) {
	contract, err := bindContractYayoiCollection(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionTransactor{contract: contract}, nil
}

// NewContractYayoiCollectionFilterer creates a new log filterer instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollectionFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractYayoiCollectionFilterer, error) {
	contract, err := bindContractYayoiCollection(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionFilterer{contract: contract}, nil
}

// bindContractYayoiCollection binds a generic wrapper to an already deployed contract.
func bindContractYayoiCollection(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractYayoiCollectionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractYayoiCollection *ContractYayoiCollectionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractYayoiCollection.Contract.ContractYayoiCollectionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractYayoiCollection *ContractYayoiCollectionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.ContractYayoiCollectionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractYayoiCollection *ContractYayoiCollectionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.ContractYayoiCollectionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractYayoiCollection *ContractYayoiCollectionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractYayoiCollection.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.contract.Transact(opts, method, params...)
}

// AuctionDuration is a free data retrieval call binding the contract method 0x0cbf54c8.
//
// Solidity: function auctionDuration() view returns(uint64)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) AuctionDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "auctionDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// AuctionDuration is a free data retrieval call binding the contract method 0x0cbf54c8.
//
// Solidity: function auctionDuration() view returns(uint64)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) AuctionDuration() (uint64, error) {
	return _ContractYayoiCollection.Contract.AuctionDuration(&_ContractYayoiCollection.CallOpts)
}

// AuctionDuration is a free data retrieval call binding the contract method 0x0cbf54c8.
//
// Solidity: function auctionDuration() view returns(uint64)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) AuctionDuration() (uint64, error) {
	return _ContractYayoiCollection.Contract.AuctionDuration(&_ContractYayoiCollection.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.BalanceOf(&_ContractYayoiCollection.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.BalanceOf(&_ContractYayoiCollection.CallOpts, owner)
}

// CreationTimestamp is a free data retrieval call binding the contract method 0xb3311086.
//
// Solidity: function creationTimestamp() view returns(uint64)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) CreationTimestamp(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "creationTimestamp")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CreationTimestamp is a free data retrieval call binding the contract method 0xb3311086.
//
// Solidity: function creationTimestamp() view returns(uint64)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) CreationTimestamp() (uint64, error) {
	return _ContractYayoiCollection.Contract.CreationTimestamp(&_ContractYayoiCollection.CallOpts)
}

// CreationTimestamp is a free data retrieval call binding the contract method 0xb3311086.
//
// Solidity: function creationTimestamp() view returns(uint64)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) CreationTimestamp() (uint64, error) {
	return _ContractYayoiCollection.Contract.CreationTimestamp(&_ContractYayoiCollection.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) DomainSeparator() ([32]byte, error) {
	return _ContractYayoiCollection.Contract.DomainSeparator(&_ContractYayoiCollection.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) DomainSeparator() ([32]byte, error) {
	return _ContractYayoiCollection.Contract.DomainSeparator(&_ContractYayoiCollection.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ContractYayoiCollection.Contract.Eip712Domain(&_ContractYayoiCollection.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ContractYayoiCollection.Contract.Eip712Domain(&_ContractYayoiCollection.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Factory() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Factory(&_ContractYayoiCollection.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Factory() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Factory(&_ContractYayoiCollection.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.GetApproved(&_ContractYayoiCollection.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.GetApproved(&_ContractYayoiCollection.CallOpts, tokenId)
}

// GetAuction is a free data retrieval call binding the contract method 0x78bd7935.
//
// Solidity: function getAuction(uint256 auctionId) view returns((bool,address,uint256,string))
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetAuction(opts *bind.CallOpts, auctionId *big.Int) (YayoiCollectionAuction, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getAuction", auctionId)

	if err != nil {
		return *new(YayoiCollectionAuction), err
	}

	out0 := *abi.ConvertType(out[0], new(YayoiCollectionAuction)).(*YayoiCollectionAuction)

	return out0, err

}

// GetAuction is a free data retrieval call binding the contract method 0x78bd7935.
//
// Solidity: function getAuction(uint256 auctionId) view returns((bool,address,uint256,string))
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetAuction(auctionId *big.Int) (YayoiCollectionAuction, error) {
	return _ContractYayoiCollection.Contract.GetAuction(&_ContractYayoiCollection.CallOpts, auctionId)
}

// GetAuction is a free data retrieval call binding the contract method 0x78bd7935.
//
// Solidity: function getAuction(uint256 auctionId) view returns((bool,address,uint256,string))
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetAuction(auctionId *big.Int) (YayoiCollectionAuction, error) {
	return _ContractYayoiCollection.Contract.GetAuction(&_ContractYayoiCollection.CallOpts, auctionId)
}

// GetAuctionEndTime is a free data retrieval call binding the contract method 0x930e79f1.
//
// Solidity: function getAuctionEndTime(uint256 auctionId) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetAuctionEndTime(opts *bind.CallOpts, auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getAuctionEndTime", auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionEndTime is a free data retrieval call binding the contract method 0x930e79f1.
//
// Solidity: function getAuctionEndTime(uint256 auctionId) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetAuctionEndTime(auctionId *big.Int) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetAuctionEndTime(&_ContractYayoiCollection.CallOpts, auctionId)
}

// GetAuctionEndTime is a free data retrieval call binding the contract method 0x930e79f1.
//
// Solidity: function getAuctionEndTime(uint256 auctionId) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetAuctionEndTime(auctionId *big.Int) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetAuctionEndTime(&_ContractYayoiCollection.CallOpts, auctionId)
}

// GetAuctionIdByTimestamp is a free data retrieval call binding the contract method 0x66ef1d70.
//
// Solidity: function getAuctionIdByTimestamp(uint256 timestamp) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetAuctionIdByTimestamp(opts *bind.CallOpts, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getAuctionIdByTimestamp", timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionIdByTimestamp is a free data retrieval call binding the contract method 0x66ef1d70.
//
// Solidity: function getAuctionIdByTimestamp(uint256 timestamp) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetAuctionIdByTimestamp(timestamp *big.Int) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetAuctionIdByTimestamp(&_ContractYayoiCollection.CallOpts, timestamp)
}

// GetAuctionIdByTimestamp is a free data retrieval call binding the contract method 0x66ef1d70.
//
// Solidity: function getAuctionIdByTimestamp(uint256 timestamp) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetAuctionIdByTimestamp(timestamp *big.Int) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetAuctionIdByTimestamp(&_ContractYayoiCollection.CallOpts, timestamp)
}

// GetAuctionStartTime is a free data retrieval call binding the contract method 0x919e84f5.
//
// Solidity: function getAuctionStartTime(uint256 auctionId) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetAuctionStartTime(opts *bind.CallOpts, auctionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getAuctionStartTime", auctionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionStartTime is a free data retrieval call binding the contract method 0x919e84f5.
//
// Solidity: function getAuctionStartTime(uint256 auctionId) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetAuctionStartTime(auctionId *big.Int) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetAuctionStartTime(&_ContractYayoiCollection.CallOpts, auctionId)
}

// GetAuctionStartTime is a free data retrieval call binding the contract method 0x919e84f5.
//
// Solidity: function getAuctionStartTime(uint256 auctionId) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetAuctionStartTime(auctionId *big.Int) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetAuctionStartTime(&_ContractYayoiCollection.CallOpts, auctionId)
}

// GetCurrentAuctionId is a free data retrieval call binding the contract method 0x157db316.
//
// Solidity: function getCurrentAuctionId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetCurrentAuctionId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getCurrentAuctionId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentAuctionId is a free data retrieval call binding the contract method 0x157db316.
//
// Solidity: function getCurrentAuctionId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetCurrentAuctionId() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetCurrentAuctionId(&_ContractYayoiCollection.CallOpts)
}

// GetCurrentAuctionId is a free data retrieval call binding the contract method 0x157db316.
//
// Solidity: function getCurrentAuctionId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetCurrentAuctionId() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.GetCurrentAuctionId(&_ContractYayoiCollection.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ContractYayoiCollection.Contract.IsApprovedForAll(&_ContractYayoiCollection.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ContractYayoiCollection.Contract.IsApprovedForAll(&_ContractYayoiCollection.CallOpts, owner, operator)
}

// MinimumBidPrice is a free data retrieval call binding the contract method 0x0b0ee90f.
//
// Solidity: function minimumBidPrice() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) MinimumBidPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "minimumBidPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumBidPrice is a free data retrieval call binding the contract method 0x0b0ee90f.
//
// Solidity: function minimumBidPrice() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) MinimumBidPrice() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.MinimumBidPrice(&_ContractYayoiCollection.CallOpts)
}

// MinimumBidPrice is a free data retrieval call binding the contract method 0x0b0ee90f.
//
// Solidity: function minimumBidPrice() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) MinimumBidPrice() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.MinimumBidPrice(&_ContractYayoiCollection.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Name() (string, error) {
	return _ContractYayoiCollection.Contract.Name(&_ContractYayoiCollection.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Name() (string, error) {
	return _ContractYayoiCollection.Contract.Name(&_ContractYayoiCollection.CallOpts)
}

// NextTokenId is a free data retrieval call binding the contract method 0x75794a3c.
//
// Solidity: function nextTokenId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) NextTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "nextTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextTokenId is a free data retrieval call binding the contract method 0x75794a3c.
//
// Solidity: function nextTokenId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) NextTokenId() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.NextTokenId(&_ContractYayoiCollection.CallOpts)
}

// NextTokenId is a free data retrieval call binding the contract method 0x75794a3c.
//
// Solidity: function nextTokenId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) NextTokenId() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.NextTokenId(&_ContractYayoiCollection.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Owner() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Owner(&_ContractYayoiCollection.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Owner() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Owner(&_ContractYayoiCollection.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.OwnerOf(&_ContractYayoiCollection.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.OwnerOf(&_ContractYayoiCollection.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Paused() (bool, error) {
	return _ContractYayoiCollection.Contract.Paused(&_ContractYayoiCollection.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Paused() (bool, error) {
	return _ContractYayoiCollection.Contract.Paused(&_ContractYayoiCollection.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) PaymentToken() (common.Address, error) {
	return _ContractYayoiCollection.Contract.PaymentToken(&_ContractYayoiCollection.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) PaymentToken() (common.Address, error) {
	return _ContractYayoiCollection.Contract.PaymentToken(&_ContractYayoiCollection.CallOpts)
}

// PendingWithdrawals is a free data retrieval call binding the contract method 0xf3f43703.
//
// Solidity: function pendingWithdrawals(address ) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) PendingWithdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "pendingWithdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingWithdrawals is a free data retrieval call binding the contract method 0xf3f43703.
//
// Solidity: function pendingWithdrawals(address ) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) PendingWithdrawals(arg0 common.Address) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.PendingWithdrawals(&_ContractYayoiCollection.CallOpts, arg0)
}

// PendingWithdrawals is a free data retrieval call binding the contract method 0xf3f43703.
//
// Solidity: function pendingWithdrawals(address ) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) PendingWithdrawals(arg0 common.Address) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.PendingWithdrawals(&_ContractYayoiCollection.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ContractYayoiCollection.Contract.SupportsInterface(&_ContractYayoiCollection.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ContractYayoiCollection.Contract.SupportsInterface(&_ContractYayoiCollection.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Symbol() (string, error) {
	return _ContractYayoiCollection.Contract.Symbol(&_ContractYayoiCollection.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Symbol() (string, error) {
	return _ContractYayoiCollection.Contract.Symbol(&_ContractYayoiCollection.CallOpts)
}

// SystemPromptUri is a free data retrieval call binding the contract method 0xa64604df.
//
// Solidity: function systemPromptUri() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) SystemPromptUri(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "systemPromptUri")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SystemPromptUri is a free data retrieval call binding the contract method 0xa64604df.
//
// Solidity: function systemPromptUri() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SystemPromptUri() (string, error) {
	return _ContractYayoiCollection.Contract.SystemPromptUri(&_ContractYayoiCollection.CallOpts)
}

// SystemPromptUri is a free data retrieval call binding the contract method 0xa64604df.
//
// Solidity: function systemPromptUri() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) SystemPromptUri() (string, error) {
	return _ContractYayoiCollection.Contract.SystemPromptUri(&_ContractYayoiCollection.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ContractYayoiCollection.Contract.TokenURI(&_ContractYayoiCollection.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ContractYayoiCollection.Contract.TokenURI(&_ContractYayoiCollection.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Approve(&_ContractYayoiCollection.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Approve(&_ContractYayoiCollection.TransactOpts, to, tokenId)
}

// FinishPromptAuction is a paid mutator transaction binding the contract method 0x16d5c3a4.
//
// Solidity: function finishPromptAuction(uint256 auctionId, string uri, bytes signature) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) FinishPromptAuction(opts *bind.TransactOpts, auctionId *big.Int, uri string, signature []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "finishPromptAuction", auctionId, uri, signature)
}

// FinishPromptAuction is a paid mutator transaction binding the contract method 0x16d5c3a4.
//
// Solidity: function finishPromptAuction(uint256 auctionId, string uri, bytes signature) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) FinishPromptAuction(auctionId *big.Int, uri string, signature []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.FinishPromptAuction(&_ContractYayoiCollection.TransactOpts, auctionId, uri, signature)
}

// FinishPromptAuction is a paid mutator transaction binding the contract method 0x16d5c3a4.
//
// Solidity: function finishPromptAuction(uint256 auctionId, string uri, bytes signature) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) FinishPromptAuction(auctionId *big.Int, uri string, signature []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.FinishPromptAuction(&_ContractYayoiCollection.TransactOpts, auctionId, uri, signature)
}

// Initialize is a paid mutator transaction binding the contract method 0x95e49c7c.
//
// Solidity: function initialize((string,string,address,address,string,address,uint256,uint64) params) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Initialize(opts *bind.TransactOpts, params YayoiCollectionInitializeParams) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "initialize", params)
}

// Initialize is a paid mutator transaction binding the contract method 0x95e49c7c.
//
// Solidity: function initialize((string,string,address,address,string,address,uint256,uint64) params) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Initialize(params YayoiCollectionInitializeParams) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Initialize(&_ContractYayoiCollection.TransactOpts, params)
}

// Initialize is a paid mutator transaction binding the contract method 0x95e49c7c.
//
// Solidity: function initialize((string,string,address,address,string,address,uint256,uint64) params) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Initialize(params YayoiCollectionInitializeParams) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Initialize(&_ContractYayoiCollection.TransactOpts, params)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Pause() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Pause(&_ContractYayoiCollection.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Pause() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Pause(&_ContractYayoiCollection.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.RenounceOwnership(&_ContractYayoiCollection.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.RenounceOwnership(&_ContractYayoiCollection.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom0(&_ContractYayoiCollection.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom0(&_ContractYayoiCollection.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetApprovalForAll(&_ContractYayoiCollection.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetApprovalForAll(&_ContractYayoiCollection.TransactOpts, operator, approved)
}

// SetMinimumBidPrice is a paid mutator transaction binding the contract method 0x77b5717f.
//
// Solidity: function setMinimumBidPrice(uint256 _price) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SetMinimumBidPrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "setMinimumBidPrice", _price)
}

// SetMinimumBidPrice is a paid mutator transaction binding the contract method 0x77b5717f.
//
// Solidity: function setMinimumBidPrice(uint256 _price) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SetMinimumBidPrice(_price *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetMinimumBidPrice(&_ContractYayoiCollection.TransactOpts, _price)
}

// SetMinimumBidPrice is a paid mutator transaction binding the contract method 0x77b5717f.
//
// Solidity: function setMinimumBidPrice(uint256 _price) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SetMinimumBidPrice(_price *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetMinimumBidPrice(&_ContractYayoiCollection.TransactOpts, _price)
}

// SuggestPrompt is a paid mutator transaction binding the contract method 0xac08121a.
//
// Solidity: function suggestPrompt(uint256 auctionId, string prompt, uint256 bid) payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SuggestPrompt(opts *bind.TransactOpts, auctionId *big.Int, prompt string, bid *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "suggestPrompt", auctionId, prompt, bid)
}

// SuggestPrompt is a paid mutator transaction binding the contract method 0xac08121a.
//
// Solidity: function suggestPrompt(uint256 auctionId, string prompt, uint256 bid) payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SuggestPrompt(auctionId *big.Int, prompt string, bid *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SuggestPrompt(&_ContractYayoiCollection.TransactOpts, auctionId, prompt, bid)
}

// SuggestPrompt is a paid mutator transaction binding the contract method 0xac08121a.
//
// Solidity: function suggestPrompt(uint256 auctionId, string prompt, uint256 bid) payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SuggestPrompt(auctionId *big.Int, prompt string, bid *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SuggestPrompt(&_ContractYayoiCollection.TransactOpts, auctionId, prompt, bid)
}

// SweepTokens is a paid mutator transaction binding the contract method 0xf5f6d3af.
//
// Solidity: function sweepTokens(address token) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SweepTokens(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "sweepTokens", token)
}

// SweepTokens is a paid mutator transaction binding the contract method 0xf5f6d3af.
//
// Solidity: function sweepTokens(address token) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SweepTokens(token common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SweepTokens(&_ContractYayoiCollection.TransactOpts, token)
}

// SweepTokens is a paid mutator transaction binding the contract method 0xf5f6d3af.
//
// Solidity: function sweepTokens(address token) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SweepTokens(token common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SweepTokens(&_ContractYayoiCollection.TransactOpts, token)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferOwnership(&_ContractYayoiCollection.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferOwnership(&_ContractYayoiCollection.TransactOpts, newOwner)
}

// WithdrawPendingBids is a paid mutator transaction binding the contract method 0xea8a8a2a.
//
// Solidity: function withdrawPendingBids() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) WithdrawPendingBids(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "withdrawPendingBids")
}

// WithdrawPendingBids is a paid mutator transaction binding the contract method 0xea8a8a2a.
//
// Solidity: function withdrawPendingBids() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) WithdrawPendingBids() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.WithdrawPendingBids(&_ContractYayoiCollection.TransactOpts)
}

// WithdrawPendingBids is a paid mutator transaction binding the contract method 0xea8a8a2a.
//
// Solidity: function withdrawPendingBids() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) WithdrawPendingBids() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.WithdrawPendingBids(&_ContractYayoiCollection.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Receive() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Receive(&_ContractYayoiCollection.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Receive() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Receive(&_ContractYayoiCollection.TransactOpts)
}

// ContractYayoiCollectionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApprovalIterator struct {
	Event *ContractYayoiCollectionApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionApproval represents a Approval event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ContractYayoiCollectionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionApprovalIterator{contract: _ContractYayoiCollection.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionApproval)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseApproval(log types.Log) (*ContractYayoiCollectionApproval, error) {
	event := new(ContractYayoiCollectionApproval)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApprovalForAllIterator struct {
	Event *ContractYayoiCollectionApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionApprovalForAll represents a ApprovalForAll event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ContractYayoiCollectionApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionApprovalForAllIterator{contract: _ContractYayoiCollection.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionApprovalForAll)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseApprovalForAll(log types.Log) (*ContractYayoiCollectionApprovalForAll, error) {
	event := new(ContractYayoiCollectionApprovalForAll)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionBatchMetadataUpdateIterator struct {
	Event *ContractYayoiCollectionBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*ContractYayoiCollectionBatchMetadataUpdateIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionBatchMetadataUpdateIterator{contract: _ContractYayoiCollection.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionBatchMetadataUpdate)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseBatchMetadataUpdate(log types.Log) (*ContractYayoiCollectionBatchMetadataUpdate, error) {
	event := new(ContractYayoiCollectionBatchMetadataUpdate)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionEIP712DomainChangedIterator struct {
	Event *ContractYayoiCollectionEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionEIP712DomainChanged represents a EIP712DomainChanged event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ContractYayoiCollectionEIP712DomainChangedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionEIP712DomainChangedIterator{contract: _ContractYayoiCollection.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionEIP712DomainChanged)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseEIP712DomainChanged(log types.Log) (*ContractYayoiCollectionEIP712DomainChanged, error) {
	event := new(ContractYayoiCollectionEIP712DomainChanged)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionInitializedIterator struct {
	Event *ContractYayoiCollectionInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionInitialized represents a Initialized event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractYayoiCollectionInitializedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionInitializedIterator{contract: _ContractYayoiCollection.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionInitialized)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseInitialized(log types.Log) (*ContractYayoiCollectionInitialized, error) {
	event := new(ContractYayoiCollectionInitialized)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionMetadataUpdateIterator struct {
	Event *ContractYayoiCollectionMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionMetadataUpdate represents a MetadataUpdate event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*ContractYayoiCollectionMetadataUpdateIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionMetadataUpdateIterator{contract: _ContractYayoiCollection.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionMetadataUpdate)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseMetadataUpdate(log types.Log) (*ContractYayoiCollectionMetadataUpdate, error) {
	event := new(ContractYayoiCollectionMetadataUpdate)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionMinimumBidPriceUpdatedIterator is returned from FilterMinimumBidPriceUpdated and is used to iterate over the raw logs and unpacked data for MinimumBidPriceUpdated events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionMinimumBidPriceUpdatedIterator struct {
	Event *ContractYayoiCollectionMinimumBidPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionMinimumBidPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionMinimumBidPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionMinimumBidPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionMinimumBidPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionMinimumBidPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionMinimumBidPriceUpdated represents a MinimumBidPriceUpdated event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionMinimumBidPriceUpdated struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMinimumBidPriceUpdated is a free log retrieval operation binding the contract event 0x4e1604effc0bf569150bff6c299be65828d46873b5ea1764ea94eb121ce5125d.
//
// Solidity: event MinimumBidPriceUpdated(uint256 price)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterMinimumBidPriceUpdated(opts *bind.FilterOpts) (*ContractYayoiCollectionMinimumBidPriceUpdatedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "MinimumBidPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionMinimumBidPriceUpdatedIterator{contract: _ContractYayoiCollection.contract, event: "MinimumBidPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumBidPriceUpdated is a free log subscription operation binding the contract event 0x4e1604effc0bf569150bff6c299be65828d46873b5ea1764ea94eb121ce5125d.
//
// Solidity: event MinimumBidPriceUpdated(uint256 price)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchMinimumBidPriceUpdated(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionMinimumBidPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "MinimumBidPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionMinimumBidPriceUpdated)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "MinimumBidPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumBidPriceUpdated is a log parse operation binding the contract event 0x4e1604effc0bf569150bff6c299be65828d46873b5ea1764ea94eb121ce5125d.
//
// Solidity: event MinimumBidPriceUpdated(uint256 price)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseMinimumBidPriceUpdated(log types.Log) (*ContractYayoiCollectionMinimumBidPriceUpdated, error) {
	event := new(ContractYayoiCollectionMinimumBidPriceUpdated)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "MinimumBidPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionOwnershipTransferredIterator struct {
	Event *ContractYayoiCollectionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionOwnershipTransferred represents a OwnershipTransferred event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractYayoiCollectionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionOwnershipTransferredIterator{contract: _ContractYayoiCollection.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionOwnershipTransferred)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseOwnershipTransferred(log types.Log) (*ContractYayoiCollectionOwnershipTransferred, error) {
	event := new(ContractYayoiCollectionOwnershipTransferred)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPausedIterator struct {
	Event *ContractYayoiCollectionPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPaused represents a Paused event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPaused(opts *bind.FilterOpts) (*ContractYayoiCollectionPausedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPausedIterator{contract: _ContractYayoiCollection.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPaused) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPaused)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePaused(log types.Log) (*ContractYayoiCollectionPaused, error) {
	event := new(ContractYayoiCollectionPaused)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptAuctionBidIterator is returned from FilterPromptAuctionBid and is used to iterate over the raw logs and unpacked data for PromptAuctionBid events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptAuctionBidIterator struct {
	Event *ContractYayoiCollectionPromptAuctionBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptAuctionBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptAuctionBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptAuctionBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptAuctionBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptAuctionBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptAuctionBid represents a PromptAuctionBid event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptAuctionBid struct {
	AuctionId *big.Int
	Bidder    common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPromptAuctionBid is a free log retrieval operation binding the contract event 0x797a600a7a69cc689dfcf3cce3bbd5355eb2ddbc787796974cb4c4bedfd8625c.
//
// Solidity: event PromptAuctionBid(uint256 indexed auctionId, address indexed bidder, uint256 amount)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptAuctionBid(opts *bind.FilterOpts, auctionId []*big.Int, bidder []common.Address) (*ContractYayoiCollectionPromptAuctionBidIterator, error) {

	var auctionIdRule []interface{}
	for _, auctionIdItem := range auctionId {
		auctionIdRule = append(auctionIdRule, auctionIdItem)
	}
	var bidderRule []interface{}
	for _, bidderItem := range bidder {
		bidderRule = append(bidderRule, bidderItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptAuctionBid", auctionIdRule, bidderRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptAuctionBidIterator{contract: _ContractYayoiCollection.contract, event: "PromptAuctionBid", logs: logs, sub: sub}, nil
}

// WatchPromptAuctionBid is a free log subscription operation binding the contract event 0x797a600a7a69cc689dfcf3cce3bbd5355eb2ddbc787796974cb4c4bedfd8625c.
//
// Solidity: event PromptAuctionBid(uint256 indexed auctionId, address indexed bidder, uint256 amount)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptAuctionBid(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptAuctionBid, auctionId []*big.Int, bidder []common.Address) (event.Subscription, error) {

	var auctionIdRule []interface{}
	for _, auctionIdItem := range auctionId {
		auctionIdRule = append(auctionIdRule, auctionIdItem)
	}
	var bidderRule []interface{}
	for _, bidderItem := range bidder {
		bidderRule = append(bidderRule, bidderItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptAuctionBid", auctionIdRule, bidderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptAuctionBid)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptAuctionBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptAuctionBid is a log parse operation binding the contract event 0x797a600a7a69cc689dfcf3cce3bbd5355eb2ddbc787796974cb4c4bedfd8625c.
//
// Solidity: event PromptAuctionBid(uint256 indexed auctionId, address indexed bidder, uint256 amount)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptAuctionBid(log types.Log) (*ContractYayoiCollectionPromptAuctionBid, error) {
	event := new(ContractYayoiCollectionPromptAuctionBid)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptAuctionBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptAuctionFinishedIterator is returned from FilterPromptAuctionFinished and is used to iterate over the raw logs and unpacked data for PromptAuctionFinished events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptAuctionFinishedIterator struct {
	Event *ContractYayoiCollectionPromptAuctionFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptAuctionFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptAuctionFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptAuctionFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptAuctionFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptAuctionFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptAuctionFinished represents a PromptAuctionFinished event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptAuctionFinished struct {
	AuctionId *big.Int
	Winner    common.Address
	Prompt    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPromptAuctionFinished is a free log retrieval operation binding the contract event 0x14bfb274a337f9408e9193eb4f20a1b3a0df509ad4a3c2e624147d7967f27aea.
//
// Solidity: event PromptAuctionFinished(uint256 indexed auctionId, address indexed winner, string prompt)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptAuctionFinished(opts *bind.FilterOpts, auctionId []*big.Int, winner []common.Address) (*ContractYayoiCollectionPromptAuctionFinishedIterator, error) {

	var auctionIdRule []interface{}
	for _, auctionIdItem := range auctionId {
		auctionIdRule = append(auctionIdRule, auctionIdItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptAuctionFinished", auctionIdRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptAuctionFinishedIterator{contract: _ContractYayoiCollection.contract, event: "PromptAuctionFinished", logs: logs, sub: sub}, nil
}

// WatchPromptAuctionFinished is a free log subscription operation binding the contract event 0x14bfb274a337f9408e9193eb4f20a1b3a0df509ad4a3c2e624147d7967f27aea.
//
// Solidity: event PromptAuctionFinished(uint256 indexed auctionId, address indexed winner, string prompt)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptAuctionFinished(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptAuctionFinished, auctionId []*big.Int, winner []common.Address) (event.Subscription, error) {

	var auctionIdRule []interface{}
	for _, auctionIdItem := range auctionId {
		auctionIdRule = append(auctionIdRule, auctionIdItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptAuctionFinished", auctionIdRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptAuctionFinished)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptAuctionFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptAuctionFinished is a log parse operation binding the contract event 0x14bfb274a337f9408e9193eb4f20a1b3a0df509ad4a3c2e624147d7967f27aea.
//
// Solidity: event PromptAuctionFinished(uint256 indexed auctionId, address indexed winner, string prompt)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptAuctionFinished(log types.Log) (*ContractYayoiCollectionPromptAuctionFinished, error) {
	event := new(ContractYayoiCollectionPromptAuctionFinished)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptAuctionFinished", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptAuctionStartedIterator is returned from FilterPromptAuctionStarted and is used to iterate over the raw logs and unpacked data for PromptAuctionStarted events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptAuctionStartedIterator struct {
	Event *ContractYayoiCollectionPromptAuctionStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptAuctionStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptAuctionStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptAuctionStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptAuctionStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptAuctionStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptAuctionStarted represents a PromptAuctionStarted event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptAuctionStarted struct {
	AuctionId *big.Int
	StartTime *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPromptAuctionStarted is a free log retrieval operation binding the contract event 0xb2b65ce77efcb926ee7a9434657c8340c1d173f2ce383af15a848762f102e7c6.
//
// Solidity: event PromptAuctionStarted(uint256 indexed auctionId, uint256 startTime)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptAuctionStarted(opts *bind.FilterOpts, auctionId []*big.Int) (*ContractYayoiCollectionPromptAuctionStartedIterator, error) {

	var auctionIdRule []interface{}
	for _, auctionIdItem := range auctionId {
		auctionIdRule = append(auctionIdRule, auctionIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptAuctionStarted", auctionIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptAuctionStartedIterator{contract: _ContractYayoiCollection.contract, event: "PromptAuctionStarted", logs: logs, sub: sub}, nil
}

// WatchPromptAuctionStarted is a free log subscription operation binding the contract event 0xb2b65ce77efcb926ee7a9434657c8340c1d173f2ce383af15a848762f102e7c6.
//
// Solidity: event PromptAuctionStarted(uint256 indexed auctionId, uint256 startTime)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptAuctionStarted(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptAuctionStarted, auctionId []*big.Int) (event.Subscription, error) {

	var auctionIdRule []interface{}
	for _, auctionIdItem := range auctionId {
		auctionIdRule = append(auctionIdRule, auctionIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptAuctionStarted", auctionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptAuctionStarted)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptAuctionStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptAuctionStarted is a log parse operation binding the contract event 0xb2b65ce77efcb926ee7a9434657c8340c1d173f2ce383af15a848762f102e7c6.
//
// Solidity: event PromptAuctionStarted(uint256 indexed auctionId, uint256 startTime)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptAuctionStarted(log types.Log) (*ContractYayoiCollectionPromptAuctionStarted, error) {
	event := new(ContractYayoiCollectionPromptAuctionStarted)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptAuctionStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptSubmittedIterator is returned from FilterPromptSubmitted and is used to iterate over the raw logs and unpacked data for PromptSubmitted events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSubmittedIterator struct {
	Event *ContractYayoiCollectionPromptSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptSubmitted represents a PromptSubmitted event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSubmitted struct {
	Submitter common.Address
	TokenId   *big.Int
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPromptSubmitted is a free log retrieval operation binding the contract event 0x7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e.
//
// Solidity: event PromptSubmitted(address indexed submitter, uint256 indexed tokenId, string uri)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptSubmitted(opts *bind.FilterOpts, submitter []common.Address, tokenId []*big.Int) (*ContractYayoiCollectionPromptSubmittedIterator, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptSubmitted", submitterRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptSubmittedIterator{contract: _ContractYayoiCollection.contract, event: "PromptSubmitted", logs: logs, sub: sub}, nil
}

// WatchPromptSubmitted is a free log subscription operation binding the contract event 0x7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e.
//
// Solidity: event PromptSubmitted(address indexed submitter, uint256 indexed tokenId, string uri)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptSubmitted(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptSubmitted, submitter []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptSubmitted", submitterRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptSubmitted)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptSubmitted is a log parse operation binding the contract event 0x7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e.
//
// Solidity: event PromptSubmitted(address indexed submitter, uint256 indexed tokenId, string uri)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptSubmitted(log types.Log) (*ContractYayoiCollectionPromptSubmitted, error) {
	event := new(ContractYayoiCollectionPromptSubmitted)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionSetupCompletedIterator is returned from FilterSetupCompleted and is used to iterate over the raw logs and unpacked data for SetupCompleted events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionSetupCompletedIterator struct {
	Event *ContractYayoiCollectionSetupCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionSetupCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionSetupCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionSetupCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionSetupCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionSetupCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionSetupCompleted represents a SetupCompleted event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionSetupCompleted struct {
	SystemPromptUri string
	PaymentToken    common.Address
	MinimumBidPrice *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetupCompleted is a free log retrieval operation binding the contract event 0x9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71.
//
// Solidity: event SetupCompleted(string systemPromptUri, address paymentToken, uint256 minimumBidPrice)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterSetupCompleted(opts *bind.FilterOpts) (*ContractYayoiCollectionSetupCompletedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "SetupCompleted")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionSetupCompletedIterator{contract: _ContractYayoiCollection.contract, event: "SetupCompleted", logs: logs, sub: sub}, nil
}

// WatchSetupCompleted is a free log subscription operation binding the contract event 0x9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71.
//
// Solidity: event SetupCompleted(string systemPromptUri, address paymentToken, uint256 minimumBidPrice)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchSetupCompleted(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionSetupCompleted) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "SetupCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionSetupCompleted)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "SetupCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetupCompleted is a log parse operation binding the contract event 0x9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71.
//
// Solidity: event SetupCompleted(string systemPromptUri, address paymentToken, uint256 minimumBidPrice)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseSetupCompleted(log types.Log) (*ContractYayoiCollectionSetupCompleted, error) {
	event := new(ContractYayoiCollectionSetupCompleted)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "SetupCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionTransferIterator struct {
	Event *ContractYayoiCollectionTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionTransfer represents a Transfer event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ContractYayoiCollectionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionTransferIterator{contract: _ContractYayoiCollection.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionTransfer)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseTransfer(log types.Log) (*ContractYayoiCollectionTransfer, error) {
	event := new(ContractYayoiCollectionTransfer)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionUnpausedIterator struct {
	Event *ContractYayoiCollectionUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionUnpaused represents a Unpaused event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ContractYayoiCollectionUnpausedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionUnpausedIterator{contract: _ContractYayoiCollection.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionUnpaused) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionUnpaused)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseUnpaused(log types.Log) (*ContractYayoiCollectionUnpaused, error) {
	event := new(ContractYayoiCollectionUnpaused)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
