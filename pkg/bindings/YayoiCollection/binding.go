// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractYayoiCollection

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// YayoiCollectionInitializeParams is an auto generated low-level Go binding around an user-defined struct.
type YayoiCollectionInitializeParams struct {
	Name                  string
	Symbol                string
	Factory               common.Address
	Owner                 common.Address
	SystemPromptUri       string
	PaymentToken          common.Address
	PromptSubmissionPrice *big.Int
}

// ContractYayoiCollectionMetaData contains all meta data concerning the ContractYayoiCollection contract.
var ContractYayoiCollectionMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"factory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractYayoiFactory\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getApproved\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structYayoiCollection.InitializeParams\",\"components\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"factory\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"systemPromptUri\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"paymentToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"promptSubmissionPrice\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isApprovedForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mintGeneratedToken\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"uri\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nextTokenId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ownerOf\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paymentToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"promptSubmissionPrice\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"safeTransferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setApprovalForAll\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPromptSubmissionPrice\",\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"suggestPrompt\",\"inputs\":[{\"name\":\"prompt\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sweepTokens\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"systemPromptUri\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tokenURI\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ApprovalForAll\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BatchMetadataUpdate\",\"inputs\":[{\"name\":\"_fromTokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_toTokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MetadataUpdate\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptSubmissionPriceUpdated\",\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptSubmitted\",\"inputs\":[{\"name\":\"submitter\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"uri\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PromptSuggested\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"prompt\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetupCompleted\",\"inputs\":[{\"name\":\"systemPromptUri\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"paymentToken\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"promptSubmissionPrice\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"ERC721IncorrectOwner\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InsufficientApproval\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC721NonexistentToken\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b612ac5806100d96000396000f3fe6080604052600436106101bb5760003560e01c806384b0196e116100ec578063c87b56dd1161008a578063e985e9c511610064578063e985e9c5146104e9578063f2fde38b14610509578063f5f6d3af14610529578063f698da251461054957600080fd5b8063c87b56dd14610489578063d8d78fb5146104a9578063dce72899146104c957600080fd5b8063a22cb465116100c6578063a22cb46514610414578063a64604df14610434578063b88d4fde14610449578063c45a01551461046957600080fd5b806384b0196e1461039a5780638da5cb5b146103c257806395d89b41146103ff57600080fd5b80636352211e116101595780636a691e77116101335780636a691e771461032f57806370a082311461034f578063715018a61461036f57806375794a3c1461038457600080fd5b80636352211e146102d8578063641d186c146102f85780636593c7f61461031c57600080fd5b8063095ea7b311610195578063095ea7b31461025657806323b872dd146102785780633013ce291461029857806342842e0e146102b857600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063081812fc1461021e57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004612269565b61055e565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610589565b6040516101f391906122d6565b34801561022a57600080fd5b5061023e6102393660046122e9565b61062d565b6040516001600160a01b0390911681526020016101f3565b34801561026257600080fd5b5061027661027136600461231e565b610642565b005b34801561028457600080fd5b50610276610293366004612348565b610651565b3480156102a457600080fd5b5060035461023e906001600160a01b031681565b3480156102c457600080fd5b506102766102d3366004612348565b6106e1565b3480156102e457600080fd5b5061023e6102f33660046122e9565b610701565b34801561030457600080fd5b5061030e60045481565b6040519081526020016101f3565b61027661032a366004612457565b61070c565b34801561033b57600080fd5b5061027661034a36600461248b565b610971565b34801561035b57600080fd5b5061030e61036a366004612502565b610b54565b34801561037b57600080fd5b50610276610bb0565b34801561039057600080fd5b5061030e60005481565b3480156103a657600080fd5b506103af610bc4565b6040516101f3979695949392919061251d565b3480156103ce57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661023e565b34801561040b57600080fd5b50610211610c70565b34801561042057600080fd5b5061027661042f3660046125c3565b610caf565b34801561044057600080fd5b50610211610cba565b34801561045557600080fd5b506102766104643660046125fa565b610d48565b34801561047557600080fd5b5060015461023e906001600160a01b031681565b34801561049557600080fd5b506102116104a43660046122e9565b610d60565b3480156104b557600080fd5b506102766104c4366004612661565b610e95565b3480156104d557600080fd5b506102766104e43660046122e9565b6110d2565b3480156104f557600080fd5b506101e7610504366004612765565b611115565b34801561051557600080fd5b50610276610524366004612502565b611162565b34801561053557600080fd5b50610276610544366004612502565b6111a0565b34801561055557600080fd5b5061030e6112c3565b60006001600160e01b03198216632483248360e11b14806105835750610583826112d2565b92915050565b600080516020612a5083398151915280546060919081906105a990612798565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590612798565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b505050505091505090565b600061063882611322565b506105838261135a565b61064d828233611394565b5050565b6001600160a01b03821661068057604051633250574960e11b8152600060048201526024015b60405180910390fd5b600061068d8383336113a1565b9050836001600160a01b0316816001600160a01b0316146106db576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610677565b50505050565b6106fc83838360405180602001604052806000815250610d48565b505050565b600061058382611322565b60006127106103e860045461072191906127e8565b61072b91906127ff565b905060008160045461073d9190612821565b6003549091506001600160a01b03161561078d57600154600354610770916001600160a01b0391821691339116856114ab565b600354610788906001600160a01b03163330846114ab565b61092b565b6004543410156107d65760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610677565b6001546040516000916001600160a01b03169084908381818185875af1925050503d8060008114610823576040519150601f19603f3d011682016040523d82523d6000602084013e610828565b606091505b50509050806108795760405162461bcd60e51b815260206004820152601c60248201527f50726f746f636f6c20666565207472616e73666572206661696c6564000000006044820152606401610677565b6004543411156109295760045460009033906108959034612821565b604051600081818185875af1925050503d80600081146108d1576040519150601f19603f3d011682016040523d82523d6000602084013e6108d6565b606091505b50509050806109275760405162461bcd60e51b815260206004820152601860248201527f457863657373204554482072657475726e206661696c656400000000000000006044820152606401610677565b505b505b336001600160a01b03167f5b1bd1480eb0dfba3c17dc2e1cb4255942df08d6e319c1d2bd2d2c41670f239d8460405161096491906122d6565b60405180910390a2505050565b6001546001600160a01b03166109bb5760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b6044820152606401610677565b6000546109c9816001612834565b60009081558351602080860191909120604080517fe9aa4d8bde8520de6be09af9531c3c7a60b27652e97c391f8f8d7b7cdca1f6f6818501526001600160a01b03891681830152606080820193909352815180820390930183526080019052805191012090610a3782611512565b90506000610a45828661153f565b6001546040516324822f0b60e11b81526001600160a01b0380841660048301529293509116906349045e1690602401602060405180830381865afa158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab59190612847565b610af55760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610677565b610aff8785611569565b610b098487611583565b83336001600160a01b03167f7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e88604051610b4391906122d6565b60405180910390a350505050505050565b6000600080516020612a508339815191526001600160a01b038316610b8f576040516322718ad960e21b815260006004820152602401610677565b6001600160a01b039092166000908152600390920160205250604090205490565b610bb86115f6565b610bc26000611651565b565b60006060808280808381600080516020612a708339815191528054909150158015610bf157506001810154155b610c355760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610677565b610c3d6116c2565b610c45611701565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793018054606091600080516020612a50833981519152916105a990612798565b61064d338383611740565b60028054610cc790612798565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf390612798565b8015610d405780601f10610d1557610100808354040283529160200191610d40565b820191906000526020600020905b815481529060010190602001808311610d2357829003601f168201915b505050505081565b610d53848484610651565b6106db33858585856117f1565b60607f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900610d8c83611322565b5060008381526020829052604081208054610da690612798565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd290612798565b8015610e1f5780601f10610df457610100808354040283529160200191610e1f565b820191906000526020600020905b815481529060010190602001808311610e0257829003601f168201915b505050505090506000610e3d60408051602081019091526000815290565b90508051600003610e5057509392505050565b815115610e83578082604051602001610e6a929190612864565b6040516020818303038152906040529350505050919050565b610e8c8561191a565b95945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610eda5750825b90506000826001600160401b03166001148015610ef65750303b155b905081158015610f04575080155b15610f225760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610f4c57845460ff60401b1916600160401b1785555b60408601516001600160a01b0316610f985760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420666163746f727960881b6044820152606401610677565b610faa8660000151876020015161198f565b610fb26119a1565b610fbf86606001516119a9565b610fe68660000151604051806040016040528060018152602001603160f81b8152506119ba565b6040860151600180546001600160a01b0319166001600160a01b03909216919091179055608086015160029061101c90826128da565b5060a0860151600380546001600160a01b0319166001600160a01b03831617905560c0870151600481905560808801516040517f9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be719361107c939091612998565b60405180910390a183156110ca57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6110da6115f6565b60048190556040518181527f80bb124438a0158b3c2dc1303be3b2a421ba8d3cbd05c75b3728bc6c1f962dda9060200160405180910390a150565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b61116a6115f6565b6001600160a01b03811661119457604051631e4fbdf760e01b815260006004820152602401610677565b61119d81611651565b50565b6111a86115f6565b6001600160a01b03811661124457604051600090339047908381818185875af1925050503d80600081146111f8576040519150601f19603f3d011682016040523d82523d6000602084013e6111fd565b606091505b505090508061064d5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610677565b6040516370a0823160e01b815230600482015261119d9033906001600160a01b038416906370a0823190602401602060405180830381865afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b291906129c6565b6001600160a01b03841691906119cc565b60006112cd6119fd565b905090565b60006001600160e01b031982166380ac58cd60e01b148061130357506001600160e01b03198216635b5e139f60e01b145b8061058357506301ffc9a760e01b6001600160e01b0319831614610583565b60008061132e83611a07565b90506001600160a01b03811661058357604051637e27328960e01b815260048101849052602401610677565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6106fc8383836001611a41565b6000600080516020612a50833981519152816113bc85611a07565b90506001600160a01b038416156113d8576113d8818587611b57565b6001600160a01b03811615611418576113f5600086600080611a41565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b03861615611449576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526106db9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611bbb565b600061058361151f6119fd565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061154f8686611c2c565b92509250925061155f8282611c79565b5090949350505050565b61064d828260405180602001604052806000815250611d32565b60008281527f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900602081905260409091206115bd83826128da565b506040518381527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a1505050565b336116287f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610bc25760405163118cdaa760e01b8152336004820152602401610677565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1028054606091600080516020612a70833981519152916105a990612798565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1038054606091600080516020612a70833981519152916105a990612798565b600080516020612a508339815191526001600160a01b03831661178157604051630b61174360e31b81526001600160a01b0384166004820152602401610677565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6001600160a01b0383163b1561191357604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906118339088908890879087906004016129df565b6020604051808303816000875af192505050801561186e575060408051601f3d908101601f1916820190925261186b91810190612a1c565b60015b6118d7573d80801561189c576040519150601f19603f3d011682016040523d82523d6000602084013e6118a1565b606091505b5080516000036118cf57604051633250574960e11b81526001600160a01b0385166004820152602401610677565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146110ca57604051633250574960e11b81526001600160a01b0385166004820152602401610677565b5050505050565b606061192582611322565b50600061193d60408051602081019091526000815290565b9050600081511161195d5760405180602001604052806000815250611988565b8061196784611d4a565b604051602001611978929190612864565b6040516020818303038152906040525b9392505050565b611997611ddc565b61064d8282611e25565b610bc2611ddc565b6119b1611ddc565b61119d81611e56565b6119c2611ddc565b61064d8282611e5e565b6040516001600160a01b038381166024830152604482018390526106fc91859182169063a9059cbb906064016114e0565b60006112cd611ebf565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b600080516020612a508339815191528180611a6457506001600160a01b03831615155b15611b26576000611a7485611322565b90506001600160a01b03841615801590611aa05750836001600160a01b0316816001600160a01b031614155b8015611ab35750611ab18185611115565b155b15611adc5760405163a9fbf51f60e01b81526001600160a01b0385166004820152602401610677565b8215611b245784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b611b62838383611f33565b6106fc576001600160a01b038316611b9057604051637e27328960e01b815260048101829052602401610677565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610677565b600080602060008451602086016000885af180611bde576040513d6000823e3d81fd5b50506000513d91508115611bf6578060011415611c03565b6001600160a01b0384163b155b156106db57604051635274afe760e01b81526001600160a01b0385166004820152602401610677565b60008060008351604103611c665760208401516040850151606086015160001a611c5888828585611f99565b955095509550505050611c72565b50508151600091506002905b9250925092565b6000826003811115611c8d57611c8d612a39565b03611c96575050565b6001826003811115611caa57611caa612a39565b03611cc85760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611cdc57611cdc612a39565b03611cfd5760405163fce698f760e01b815260048101829052602401610677565b6003826003811115611d1157611d11612a39565b0361064d576040516335e2f38360e21b815260048101829052602401610677565b611d3c8383612068565b6106fc3360008585856117f1565b60606000611d57836120cd565b60010190506000816001600160401b03811115611d7657611d76612385565b6040519080825280601f01601f191660200182016040528015611da0576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611daa57509392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610bc257604051631afcd79f60e31b815260040160405180910390fd5b611e2d611ddc565b600080516020612a5083398151915280611e4784826128da565b50600181016106db83826128da565b61116a611ddc565b611e66611ddc565b600080516020612a708339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102611ea084826128da565b5060038101611eaf83826128da565b5060008082556001909101555050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611eea6121a5565b611ef261220f565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006001600160a01b03831615801590611f915750826001600160a01b0316846001600160a01b03161480611f6d5750611f6d8484611115565b80611f915750826001600160a01b0316611f868361135a565b6001600160a01b0316145b949350505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611fd4575060009150600390508261205e565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612028573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120545750600092506001915082905061205e565b9250600091508190505b9450945094915050565b6001600160a01b03821661209257604051633250574960e11b815260006004820152602401610677565b60006120a0838360006113a1565b90506001600160a01b038116156106fc576040516339e3563760e11b815260006004820152602401610677565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061210c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612138576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061215657662386f26fc10000830492506010015b6305f5e100831061216e576305f5e100830492506008015b612710831061218257612710830492506004015b60648310612194576064830492506002015b600a83106105835760010192915050565b6000600080516020612a70833981519152816121bf6116c2565b8051909150156121d757805160209091012092915050565b815480156121e6579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b6000600080516020612a7083398151915281612229611701565b80519091501561224157805160209091012092915050565b600182015480156121e6579392505050565b6001600160e01b03198116811461119d57600080fd5b60006020828403121561227b57600080fd5b813561198881612253565b60005b838110156122a1578181015183820152602001612289565b50506000910152565b600081518084526122c2816020860160208601612286565b601f01601f19169290920160200192915050565b60208152600061198860208301846122aa565b6000602082840312156122fb57600080fd5b5035919050565b80356001600160a01b038116811461231957600080fd5b919050565b6000806040838503121561233157600080fd5b61233a83612302565b946020939093013593505050565b60008060006060848603121561235d57600080fd5b61236684612302565b925061237460208501612302565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156123bd576123bd612385565b60405290565b600082601f8301126123d457600080fd5b8135602083016000806001600160401b038411156123f4576123f4612385565b50604051601f19601f85018116603f011681018181106001600160401b038211171561242257612422612385565b60405283815290508082840187101561243a57600080fd5b838360208301376000602085830101528094505050505092915050565b60006020828403121561246957600080fd5b81356001600160401b0381111561247f57600080fd5b611f91848285016123c3565b6000806000606084860312156124a057600080fd5b6124a984612302565b925060208401356001600160401b038111156124c457600080fd5b6124d0868287016123c3565b92505060408401356001600160401b038111156124ec57600080fd5b6124f8868287016123c3565b9150509250925092565b60006020828403121561251457600080fd5b61198882612302565b60ff60f81b8816815260e06020820152600061253c60e08301896122aa565b828103604084015261254e81896122aa565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b818110156125a4578351835260209384019390920191600101612586565b50909b9a5050505050505050505050565b801515811461119d57600080fd5b600080604083850312156125d657600080fd5b6125df83612302565b915060208301356125ef816125b5565b809150509250929050565b6000806000806080858703121561261057600080fd5b61261985612302565b935061262760208601612302565b92506040850135915060608501356001600160401b0381111561264957600080fd5b612655878288016123c3565b91505092959194509250565b60006020828403121561267357600080fd5b81356001600160401b0381111561268957600080fd5b820160e0818503121561269b57600080fd5b6126a361239b565b81356001600160401b038111156126b957600080fd5b6126c5868285016123c3565b82525060208201356001600160401b038111156126e157600080fd5b6126ed868285016123c3565b6020830152506126ff60408301612302565b604082015261271060608301612302565b606082015260808201356001600160401b0381111561272e57600080fd5b61273a868285016123c3565b60808301525061274c60a08301612302565b60a082015260c091820135918101919091529392505050565b6000806040838503121561277857600080fd5b61278183612302565b915061278f60208401612302565b90509250929050565b600181811c908216806127ac57607f821691505b6020821081036127cc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610583576105836127d2565b60008261281c57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610583576105836127d2565b80820180821115610583576105836127d2565b60006020828403121561285957600080fd5b8151611988816125b5565b60008351612876818460208801612286565b83519083019061288a818360208801612286565b01949350505050565b601f8211156106fc57806000526020600020601f840160051c810160208510156128ba5750805b601f840160051c820191505b8181101561191357600081556001016128c6565b81516001600160401b038111156128f3576128f3612385565b612907816129018454612798565b84612893565b6020601f82116001811461293b57600083156129235750848201515b600019600385901b1c1916600184901b178455611913565b600084815260208120601f198516915b8281101561296b578785015182556020948501946001909201910161294b565b50848210156129895786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6060815260006129ab60608301866122aa565b6001600160a01b039490941660208301525060400152919050565b6000602082840312156129d857600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a12908301846122aa565b9695505050505050565b600060208284031215612a2e57600080fd5b815161198881612253565b634e487b7160e01b600052602160045260246000fdfe80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100a2646970667358221220c4530f2624ad5099f7be7ed854259414e59bacaf189c2d82273c63372edb99ad64736f6c634300081b0033",
}

// ContractYayoiCollectionABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractYayoiCollectionMetaData.ABI instead.
var ContractYayoiCollectionABI = ContractYayoiCollectionMetaData.ABI

// ContractYayoiCollectionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractYayoiCollectionMetaData.Bin instead.
var ContractYayoiCollectionBin = ContractYayoiCollectionMetaData.Bin

// DeployContractYayoiCollection deploys a new Ethereum contract, binding an instance of ContractYayoiCollection to it.
func DeployContractYayoiCollection(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContractYayoiCollection, error) {
	parsed, err := ContractYayoiCollectionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractYayoiCollectionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractYayoiCollection{ContractYayoiCollectionCaller: ContractYayoiCollectionCaller{contract: contract}, ContractYayoiCollectionTransactor: ContractYayoiCollectionTransactor{contract: contract}, ContractYayoiCollectionFilterer: ContractYayoiCollectionFilterer{contract: contract}}, nil
}

// ContractYayoiCollection is an auto generated Go binding around an Ethereum contract.
type ContractYayoiCollection struct {
	ContractYayoiCollectionCaller     // Read-only binding to the contract
	ContractYayoiCollectionTransactor // Write-only binding to the contract
	ContractYayoiCollectionFilterer   // Log filterer for contract events
}

// ContractYayoiCollectionCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractYayoiCollectionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractYayoiCollectionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractYayoiCollectionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractYayoiCollectionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractYayoiCollectionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractYayoiCollectionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractYayoiCollectionSession struct {
	Contract     *ContractYayoiCollection // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ContractYayoiCollectionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractYayoiCollectionCallerSession struct {
	Contract *ContractYayoiCollectionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ContractYayoiCollectionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractYayoiCollectionTransactorSession struct {
	Contract     *ContractYayoiCollectionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ContractYayoiCollectionRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractYayoiCollectionRaw struct {
	Contract *ContractYayoiCollection // Generic contract binding to access the raw methods on
}

// ContractYayoiCollectionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractYayoiCollectionCallerRaw struct {
	Contract *ContractYayoiCollectionCaller // Generic read-only contract binding to access the raw methods on
}

// ContractYayoiCollectionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractYayoiCollectionTransactorRaw struct {
	Contract *ContractYayoiCollectionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractYayoiCollection creates a new instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollection(address common.Address, backend bind.ContractBackend) (*ContractYayoiCollection, error) {
	contract, err := bindContractYayoiCollection(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollection{ContractYayoiCollectionCaller: ContractYayoiCollectionCaller{contract: contract}, ContractYayoiCollectionTransactor: ContractYayoiCollectionTransactor{contract: contract}, ContractYayoiCollectionFilterer: ContractYayoiCollectionFilterer{contract: contract}}, nil
}

// NewContractYayoiCollectionCaller creates a new read-only instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollectionCaller(address common.Address, caller bind.ContractCaller) (*ContractYayoiCollectionCaller, error) {
	contract, err := bindContractYayoiCollection(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionCaller{contract: contract}, nil
}

// NewContractYayoiCollectionTransactor creates a new write-only instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollectionTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractYayoiCollectionTransactor, error) {
	contract, err := bindContractYayoiCollection(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionTransactor{contract: contract}, nil
}

// NewContractYayoiCollectionFilterer creates a new log filterer instance of ContractYayoiCollection, bound to a specific deployed contract.
func NewContractYayoiCollectionFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractYayoiCollectionFilterer, error) {
	contract, err := bindContractYayoiCollection(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionFilterer{contract: contract}, nil
}

// bindContractYayoiCollection binds a generic wrapper to an already deployed contract.
func bindContractYayoiCollection(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractYayoiCollectionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractYayoiCollection *ContractYayoiCollectionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractYayoiCollection.Contract.ContractYayoiCollectionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractYayoiCollection *ContractYayoiCollectionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.ContractYayoiCollectionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractYayoiCollection *ContractYayoiCollectionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.ContractYayoiCollectionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractYayoiCollection *ContractYayoiCollectionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractYayoiCollection.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.BalanceOf(&_ContractYayoiCollection.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ContractYayoiCollection.Contract.BalanceOf(&_ContractYayoiCollection.CallOpts, owner)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) DomainSeparator() ([32]byte, error) {
	return _ContractYayoiCollection.Contract.DomainSeparator(&_ContractYayoiCollection.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) DomainSeparator() ([32]byte, error) {
	return _ContractYayoiCollection.Contract.DomainSeparator(&_ContractYayoiCollection.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ContractYayoiCollection.Contract.Eip712Domain(&_ContractYayoiCollection.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ContractYayoiCollection.Contract.Eip712Domain(&_ContractYayoiCollection.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Factory() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Factory(&_ContractYayoiCollection.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Factory() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Factory(&_ContractYayoiCollection.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.GetApproved(&_ContractYayoiCollection.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.GetApproved(&_ContractYayoiCollection.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ContractYayoiCollection.Contract.IsApprovedForAll(&_ContractYayoiCollection.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ContractYayoiCollection.Contract.IsApprovedForAll(&_ContractYayoiCollection.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Name() (string, error) {
	return _ContractYayoiCollection.Contract.Name(&_ContractYayoiCollection.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Name() (string, error) {
	return _ContractYayoiCollection.Contract.Name(&_ContractYayoiCollection.CallOpts)
}

// NextTokenId is a free data retrieval call binding the contract method 0x75794a3c.
//
// Solidity: function nextTokenId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) NextTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "nextTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextTokenId is a free data retrieval call binding the contract method 0x75794a3c.
//
// Solidity: function nextTokenId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) NextTokenId() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.NextTokenId(&_ContractYayoiCollection.CallOpts)
}

// NextTokenId is a free data retrieval call binding the contract method 0x75794a3c.
//
// Solidity: function nextTokenId() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) NextTokenId() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.NextTokenId(&_ContractYayoiCollection.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Owner() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Owner(&_ContractYayoiCollection.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Owner() (common.Address, error) {
	return _ContractYayoiCollection.Contract.Owner(&_ContractYayoiCollection.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.OwnerOf(&_ContractYayoiCollection.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ContractYayoiCollection.Contract.OwnerOf(&_ContractYayoiCollection.CallOpts, tokenId)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) PaymentToken() (common.Address, error) {
	return _ContractYayoiCollection.Contract.PaymentToken(&_ContractYayoiCollection.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) PaymentToken() (common.Address, error) {
	return _ContractYayoiCollection.Contract.PaymentToken(&_ContractYayoiCollection.CallOpts)
}

// PromptSubmissionPrice is a free data retrieval call binding the contract method 0x641d186c.
//
// Solidity: function promptSubmissionPrice() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) PromptSubmissionPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "promptSubmissionPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PromptSubmissionPrice is a free data retrieval call binding the contract method 0x641d186c.
//
// Solidity: function promptSubmissionPrice() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) PromptSubmissionPrice() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.PromptSubmissionPrice(&_ContractYayoiCollection.CallOpts)
}

// PromptSubmissionPrice is a free data retrieval call binding the contract method 0x641d186c.
//
// Solidity: function promptSubmissionPrice() view returns(uint256)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) PromptSubmissionPrice() (*big.Int, error) {
	return _ContractYayoiCollection.Contract.PromptSubmissionPrice(&_ContractYayoiCollection.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ContractYayoiCollection.Contract.SupportsInterface(&_ContractYayoiCollection.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ContractYayoiCollection.Contract.SupportsInterface(&_ContractYayoiCollection.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Symbol() (string, error) {
	return _ContractYayoiCollection.Contract.Symbol(&_ContractYayoiCollection.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) Symbol() (string, error) {
	return _ContractYayoiCollection.Contract.Symbol(&_ContractYayoiCollection.CallOpts)
}

// SystemPromptUri is a free data retrieval call binding the contract method 0xa64604df.
//
// Solidity: function systemPromptUri() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) SystemPromptUri(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "systemPromptUri")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SystemPromptUri is a free data retrieval call binding the contract method 0xa64604df.
//
// Solidity: function systemPromptUri() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SystemPromptUri() (string, error) {
	return _ContractYayoiCollection.Contract.SystemPromptUri(&_ContractYayoiCollection.CallOpts)
}

// SystemPromptUri is a free data retrieval call binding the contract method 0xa64604df.
//
// Solidity: function systemPromptUri() view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) SystemPromptUri() (string, error) {
	return _ContractYayoiCollection.Contract.SystemPromptUri(&_ContractYayoiCollection.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ContractYayoiCollection.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ContractYayoiCollection.Contract.TokenURI(&_ContractYayoiCollection.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ContractYayoiCollection *ContractYayoiCollectionCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ContractYayoiCollection.Contract.TokenURI(&_ContractYayoiCollection.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Approve(&_ContractYayoiCollection.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Approve(&_ContractYayoiCollection.TransactOpts, to, tokenId)
}

// Initialize is a paid mutator transaction binding the contract method 0xd8d78fb5.
//
// Solidity: function initialize((string,string,address,address,string,address,uint256) params) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Initialize(opts *bind.TransactOpts, params YayoiCollectionInitializeParams) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "initialize", params)
}

// Initialize is a paid mutator transaction binding the contract method 0xd8d78fb5.
//
// Solidity: function initialize((string,string,address,address,string,address,uint256) params) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Initialize(params YayoiCollectionInitializeParams) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Initialize(&_ContractYayoiCollection.TransactOpts, params)
}

// Initialize is a paid mutator transaction binding the contract method 0xd8d78fb5.
//
// Solidity: function initialize((string,string,address,address,string,address,uint256) params) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Initialize(params YayoiCollectionInitializeParams) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Initialize(&_ContractYayoiCollection.TransactOpts, params)
}

// MintGeneratedToken is a paid mutator transaction binding the contract method 0x6a691e77.
//
// Solidity: function mintGeneratedToken(address to, string uri, bytes signature) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) MintGeneratedToken(opts *bind.TransactOpts, to common.Address, uri string, signature []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "mintGeneratedToken", to, uri, signature)
}

// MintGeneratedToken is a paid mutator transaction binding the contract method 0x6a691e77.
//
// Solidity: function mintGeneratedToken(address to, string uri, bytes signature) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) MintGeneratedToken(to common.Address, uri string, signature []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.MintGeneratedToken(&_ContractYayoiCollection.TransactOpts, to, uri, signature)
}

// MintGeneratedToken is a paid mutator transaction binding the contract method 0x6a691e77.
//
// Solidity: function mintGeneratedToken(address to, string uri, bytes signature) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) MintGeneratedToken(to common.Address, uri string, signature []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.MintGeneratedToken(&_ContractYayoiCollection.TransactOpts, to, uri, signature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.RenounceOwnership(&_ContractYayoiCollection.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.RenounceOwnership(&_ContractYayoiCollection.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom0(&_ContractYayoiCollection.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SafeTransferFrom0(&_ContractYayoiCollection.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetApprovalForAll(&_ContractYayoiCollection.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetApprovalForAll(&_ContractYayoiCollection.TransactOpts, operator, approved)
}

// SetPromptSubmissionPrice is a paid mutator transaction binding the contract method 0xdce72899.
//
// Solidity: function setPromptSubmissionPrice(uint256 _price) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SetPromptSubmissionPrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "setPromptSubmissionPrice", _price)
}

// SetPromptSubmissionPrice is a paid mutator transaction binding the contract method 0xdce72899.
//
// Solidity: function setPromptSubmissionPrice(uint256 _price) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SetPromptSubmissionPrice(_price *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetPromptSubmissionPrice(&_ContractYayoiCollection.TransactOpts, _price)
}

// SetPromptSubmissionPrice is a paid mutator transaction binding the contract method 0xdce72899.
//
// Solidity: function setPromptSubmissionPrice(uint256 _price) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SetPromptSubmissionPrice(_price *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SetPromptSubmissionPrice(&_ContractYayoiCollection.TransactOpts, _price)
}

// SuggestPrompt is a paid mutator transaction binding the contract method 0x6593c7f6.
//
// Solidity: function suggestPrompt(string prompt) payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SuggestPrompt(opts *bind.TransactOpts, prompt string) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "suggestPrompt", prompt)
}

// SuggestPrompt is a paid mutator transaction binding the contract method 0x6593c7f6.
//
// Solidity: function suggestPrompt(string prompt) payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SuggestPrompt(prompt string) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SuggestPrompt(&_ContractYayoiCollection.TransactOpts, prompt)
}

// SuggestPrompt is a paid mutator transaction binding the contract method 0x6593c7f6.
//
// Solidity: function suggestPrompt(string prompt) payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SuggestPrompt(prompt string) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SuggestPrompt(&_ContractYayoiCollection.TransactOpts, prompt)
}

// SweepTokens is a paid mutator transaction binding the contract method 0xf5f6d3af.
//
// Solidity: function sweepTokens(address token) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) SweepTokens(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "sweepTokens", token)
}

// SweepTokens is a paid mutator transaction binding the contract method 0xf5f6d3af.
//
// Solidity: function sweepTokens(address token) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) SweepTokens(token common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SweepTokens(&_ContractYayoiCollection.TransactOpts, token)
}

// SweepTokens is a paid mutator transaction binding the contract method 0xf5f6d3af.
//
// Solidity: function sweepTokens(address token) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) SweepTokens(token common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.SweepTokens(&_ContractYayoiCollection.TransactOpts, token)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferFrom(&_ContractYayoiCollection.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferOwnership(&_ContractYayoiCollection.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.TransferOwnership(&_ContractYayoiCollection.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractYayoiCollection.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionSession) Receive() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Receive(&_ContractYayoiCollection.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ContractYayoiCollection *ContractYayoiCollectionTransactorSession) Receive() (*types.Transaction, error) {
	return _ContractYayoiCollection.Contract.Receive(&_ContractYayoiCollection.TransactOpts)
}

// ContractYayoiCollectionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApprovalIterator struct {
	Event *ContractYayoiCollectionApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionApproval represents a Approval event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ContractYayoiCollectionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionApprovalIterator{contract: _ContractYayoiCollection.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionApproval)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseApproval(log types.Log) (*ContractYayoiCollectionApproval, error) {
	event := new(ContractYayoiCollectionApproval)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApprovalForAllIterator struct {
	Event *ContractYayoiCollectionApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionApprovalForAll represents a ApprovalForAll event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ContractYayoiCollectionApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionApprovalForAllIterator{contract: _ContractYayoiCollection.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionApprovalForAll)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseApprovalForAll(log types.Log) (*ContractYayoiCollectionApprovalForAll, error) {
	event := new(ContractYayoiCollectionApprovalForAll)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionBatchMetadataUpdateIterator struct {
	Event *ContractYayoiCollectionBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*ContractYayoiCollectionBatchMetadataUpdateIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionBatchMetadataUpdateIterator{contract: _ContractYayoiCollection.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionBatchMetadataUpdate)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseBatchMetadataUpdate(log types.Log) (*ContractYayoiCollectionBatchMetadataUpdate, error) {
	event := new(ContractYayoiCollectionBatchMetadataUpdate)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionEIP712DomainChangedIterator struct {
	Event *ContractYayoiCollectionEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionEIP712DomainChanged represents a EIP712DomainChanged event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ContractYayoiCollectionEIP712DomainChangedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionEIP712DomainChangedIterator{contract: _ContractYayoiCollection.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionEIP712DomainChanged)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseEIP712DomainChanged(log types.Log) (*ContractYayoiCollectionEIP712DomainChanged, error) {
	event := new(ContractYayoiCollectionEIP712DomainChanged)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionInitializedIterator struct {
	Event *ContractYayoiCollectionInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionInitialized represents a Initialized event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractYayoiCollectionInitializedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionInitializedIterator{contract: _ContractYayoiCollection.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionInitialized)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseInitialized(log types.Log) (*ContractYayoiCollectionInitialized, error) {
	event := new(ContractYayoiCollectionInitialized)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionMetadataUpdateIterator struct {
	Event *ContractYayoiCollectionMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionMetadataUpdate represents a MetadataUpdate event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*ContractYayoiCollectionMetadataUpdateIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionMetadataUpdateIterator{contract: _ContractYayoiCollection.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionMetadataUpdate)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseMetadataUpdate(log types.Log) (*ContractYayoiCollectionMetadataUpdate, error) {
	event := new(ContractYayoiCollectionMetadataUpdate)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionOwnershipTransferredIterator struct {
	Event *ContractYayoiCollectionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionOwnershipTransferred represents a OwnershipTransferred event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractYayoiCollectionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionOwnershipTransferredIterator{contract: _ContractYayoiCollection.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionOwnershipTransferred)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseOwnershipTransferred(log types.Log) (*ContractYayoiCollectionOwnershipTransferred, error) {
	event := new(ContractYayoiCollectionOwnershipTransferred)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator is returned from FilterPromptSubmissionPriceUpdated and is used to iterate over the raw logs and unpacked data for PromptSubmissionPriceUpdated events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator struct {
	Event *ContractYayoiCollectionPromptSubmissionPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptSubmissionPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptSubmissionPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptSubmissionPriceUpdated represents a PromptSubmissionPriceUpdated event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSubmissionPriceUpdated struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPromptSubmissionPriceUpdated is a free log retrieval operation binding the contract event 0x80bb124438a0158b3c2dc1303be3b2a421ba8d3cbd05c75b3728bc6c1f962dda.
//
// Solidity: event PromptSubmissionPriceUpdated(uint256 price)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptSubmissionPriceUpdated(opts *bind.FilterOpts) (*ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptSubmissionPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptSubmissionPriceUpdatedIterator{contract: _ContractYayoiCollection.contract, event: "PromptSubmissionPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchPromptSubmissionPriceUpdated is a free log subscription operation binding the contract event 0x80bb124438a0158b3c2dc1303be3b2a421ba8d3cbd05c75b3728bc6c1f962dda.
//
// Solidity: event PromptSubmissionPriceUpdated(uint256 price)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptSubmissionPriceUpdated(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptSubmissionPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptSubmissionPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptSubmissionPriceUpdated)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSubmissionPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptSubmissionPriceUpdated is a log parse operation binding the contract event 0x80bb124438a0158b3c2dc1303be3b2a421ba8d3cbd05c75b3728bc6c1f962dda.
//
// Solidity: event PromptSubmissionPriceUpdated(uint256 price)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptSubmissionPriceUpdated(log types.Log) (*ContractYayoiCollectionPromptSubmissionPriceUpdated, error) {
	event := new(ContractYayoiCollectionPromptSubmissionPriceUpdated)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSubmissionPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptSubmittedIterator is returned from FilterPromptSubmitted and is used to iterate over the raw logs and unpacked data for PromptSubmitted events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSubmittedIterator struct {
	Event *ContractYayoiCollectionPromptSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptSubmitted represents a PromptSubmitted event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSubmitted struct {
	Submitter common.Address
	TokenId   *big.Int
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPromptSubmitted is a free log retrieval operation binding the contract event 0x7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e.
//
// Solidity: event PromptSubmitted(address indexed submitter, uint256 indexed tokenId, string uri)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptSubmitted(opts *bind.FilterOpts, submitter []common.Address, tokenId []*big.Int) (*ContractYayoiCollectionPromptSubmittedIterator, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptSubmitted", submitterRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptSubmittedIterator{contract: _ContractYayoiCollection.contract, event: "PromptSubmitted", logs: logs, sub: sub}, nil
}

// WatchPromptSubmitted is a free log subscription operation binding the contract event 0x7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e.
//
// Solidity: event PromptSubmitted(address indexed submitter, uint256 indexed tokenId, string uri)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptSubmitted(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptSubmitted, submitter []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var submitterRule []interface{}
	for _, submitterItem := range submitter {
		submitterRule = append(submitterRule, submitterItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptSubmitted", submitterRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptSubmitted)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptSubmitted is a log parse operation binding the contract event 0x7a2b1c4f2f6183bf1f247f361ab7fa8baf1033f80f6a023d02b6c1ebc8b4dd9e.
//
// Solidity: event PromptSubmitted(address indexed submitter, uint256 indexed tokenId, string uri)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptSubmitted(log types.Log) (*ContractYayoiCollectionPromptSubmitted, error) {
	event := new(ContractYayoiCollectionPromptSubmitted)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionPromptSuggestedIterator is returned from FilterPromptSuggested and is used to iterate over the raw logs and unpacked data for PromptSuggested events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSuggestedIterator struct {
	Event *ContractYayoiCollectionPromptSuggested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionPromptSuggestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionPromptSuggested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionPromptSuggested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionPromptSuggestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionPromptSuggestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionPromptSuggested represents a PromptSuggested event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionPromptSuggested struct {
	Sender common.Address
	Prompt string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPromptSuggested is a free log retrieval operation binding the contract event 0x5b1bd1480eb0dfba3c17dc2e1cb4255942df08d6e319c1d2bd2d2c41670f239d.
//
// Solidity: event PromptSuggested(address indexed sender, string prompt)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterPromptSuggested(opts *bind.FilterOpts, sender []common.Address) (*ContractYayoiCollectionPromptSuggestedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "PromptSuggested", senderRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionPromptSuggestedIterator{contract: _ContractYayoiCollection.contract, event: "PromptSuggested", logs: logs, sub: sub}, nil
}

// WatchPromptSuggested is a free log subscription operation binding the contract event 0x5b1bd1480eb0dfba3c17dc2e1cb4255942df08d6e319c1d2bd2d2c41670f239d.
//
// Solidity: event PromptSuggested(address indexed sender, string prompt)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchPromptSuggested(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionPromptSuggested, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "PromptSuggested", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionPromptSuggested)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSuggested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptSuggested is a log parse operation binding the contract event 0x5b1bd1480eb0dfba3c17dc2e1cb4255942df08d6e319c1d2bd2d2c41670f239d.
//
// Solidity: event PromptSuggested(address indexed sender, string prompt)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParsePromptSuggested(log types.Log) (*ContractYayoiCollectionPromptSuggested, error) {
	event := new(ContractYayoiCollectionPromptSuggested)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "PromptSuggested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionSetupCompletedIterator is returned from FilterSetupCompleted and is used to iterate over the raw logs and unpacked data for SetupCompleted events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionSetupCompletedIterator struct {
	Event *ContractYayoiCollectionSetupCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionSetupCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionSetupCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionSetupCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionSetupCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionSetupCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionSetupCompleted represents a SetupCompleted event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionSetupCompleted struct {
	SystemPromptUri       string
	PaymentToken          common.Address
	PromptSubmissionPrice *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterSetupCompleted is a free log retrieval operation binding the contract event 0x9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71.
//
// Solidity: event SetupCompleted(string systemPromptUri, address paymentToken, uint256 promptSubmissionPrice)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterSetupCompleted(opts *bind.FilterOpts) (*ContractYayoiCollectionSetupCompletedIterator, error) {

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "SetupCompleted")
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionSetupCompletedIterator{contract: _ContractYayoiCollection.contract, event: "SetupCompleted", logs: logs, sub: sub}, nil
}

// WatchSetupCompleted is a free log subscription operation binding the contract event 0x9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71.
//
// Solidity: event SetupCompleted(string systemPromptUri, address paymentToken, uint256 promptSubmissionPrice)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchSetupCompleted(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionSetupCompleted) (event.Subscription, error) {

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "SetupCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionSetupCompleted)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "SetupCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetupCompleted is a log parse operation binding the contract event 0x9a1599fac5fb12681972e8b6b9adf6db5a43b68d23cf37343265e50b6694be71.
//
// Solidity: event SetupCompleted(string systemPromptUri, address paymentToken, uint256 promptSubmissionPrice)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseSetupCompleted(log types.Log) (*ContractYayoiCollectionSetupCompleted, error) {
	event := new(ContractYayoiCollectionSetupCompleted)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "SetupCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractYayoiCollectionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionTransferIterator struct {
	Event *ContractYayoiCollectionTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractYayoiCollectionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractYayoiCollectionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractYayoiCollectionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractYayoiCollectionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractYayoiCollectionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractYayoiCollectionTransfer represents a Transfer event raised by the ContractYayoiCollection contract.
type ContractYayoiCollectionTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ContractYayoiCollectionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractYayoiCollectionTransferIterator{contract: _ContractYayoiCollection.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractYayoiCollectionTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ContractYayoiCollection.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractYayoiCollectionTransfer)
				if err := _ContractYayoiCollection.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ContractYayoiCollection *ContractYayoiCollectionFilterer) ParseTransfer(log types.Log) (*ContractYayoiCollectionTransfer, error) {
	event := new(ContractYayoiCollectionTransfer)
	if err := _ContractYayoiCollection.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
